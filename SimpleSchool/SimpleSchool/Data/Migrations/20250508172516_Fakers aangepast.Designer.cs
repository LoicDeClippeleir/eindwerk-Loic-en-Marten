// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleSchool.Data;

#nullable disable

namespace SimpleSchool.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250508172516_Fakers aangepast")]
    partial class Fakersaangepast
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.Property<int>("OpleidingenId")
                        .HasColumnType("int");

                    b.Property<int>("VakkenId")
                        .HasColumnType("int");

                    b.HasKey("OpleidingenId", "VakkenId");

                    b.HasIndex("VakkenId");

                    b.ToTable("Opleidingsvakken", (string)null);
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Leerkracht", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Leerkracht");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Adres = "32810 Darrick Crest",
                            EMail = "officiis",
                            GeboorteDatum = new DateTime(2025, 4, 4, 2, 27, 27, 747, DateTimeKind.Local).AddTicks(7420),
                            Naam = "Ipsam possimus sunt natus voluptas officiis ex temporibus eos voluptas voluptas voluptas cum rerum aut similique totam quas aut autem."
                        },
                        new
                        {
                            Id = 12,
                            Adres = "525 Wintheiser River",
                            EMail = "incidunt",
                            GeboorteDatum = new DateTime(2025, 3, 6, 8, 3, 6, 615, DateTimeKind.Local).AddTicks(4082),
                            Naam = "Est perspiciatis dignissimos minus est dignissimos quasi ut nobis repellendus excepturi iure consequatur tempora natus amet in omnis itaque cum."
                        },
                        new
                        {
                            Id = 13,
                            Adres = "7608 Valentine Road",
                            EMail = "sunt",
                            GeboorteDatum = new DateTime(2024, 11, 5, 19, 38, 54, 370, DateTimeKind.Local).AddTicks(3781),
                            Naam = "Est et distinctio nostrum enim aut non molestiae perferendis repellat aliquid voluptas iure blanditiis enim voluptatibus illum odit non voluptatum."
                        },
                        new
                        {
                            Id = 14,
                            Adres = "5933 Oceane Viaduct",
                            EMail = "qui",
                            GeboorteDatum = new DateTime(2025, 3, 7, 2, 28, 29, 154, DateTimeKind.Local).AddTicks(2407),
                            Naam = "Voluptatem minus et placeat sapiente est qui ut molestias possimus illum placeat quia maiores repellendus et corrupti eligendi incidunt est."
                        },
                        new
                        {
                            Id = 15,
                            Adres = "9894 Erik Trafficway",
                            EMail = "id",
                            GeboorteDatum = new DateTime(2024, 12, 23, 2, 11, 41, 693, DateTimeKind.Local).AddTicks(5558),
                            Naam = "Saepe itaque quas aspernatur possimus non voluptatem perspiciatis sint amet architecto rerum fugiat sed est est impedit provident dolorum ducimus."
                        },
                        new
                        {
                            Id = 16,
                            Adres = "2565 Zemlak Plaza",
                            EMail = "enim",
                            GeboorteDatum = new DateTime(2025, 2, 14, 16, 18, 54, 98, DateTimeKind.Local).AddTicks(9338),
                            Naam = "Totam sunt ut consequuntur voluptas numquam omnis id eos sit facere ipsum sunt est mollitia et amet dolore aspernatur et."
                        },
                        new
                        {
                            Id = 17,
                            Adres = "3557 Arno Brooks",
                            EMail = "et",
                            GeboorteDatum = new DateTime(2024, 12, 23, 9, 2, 8, 385, DateTimeKind.Local).AddTicks(8771),
                            Naam = "Autem illum non exercitationem asperiores est repellat cupiditate mollitia est rem facilis est exercitationem cupiditate quasi sit sunt itaque et."
                        },
                        new
                        {
                            Id = 18,
                            Adres = "7741 Franecki Parkway",
                            EMail = "expedita",
                            GeboorteDatum = new DateTime(2024, 5, 27, 23, 2, 4, 610, DateTimeKind.Local).AddTicks(522),
                            Naam = "Iste sed accusamus qui quae et molestiae illo illum beatae eos fugit voluptate mollitia est dolorem autem vel at unde."
                        },
                        new
                        {
                            Id = 19,
                            Adres = "5509 Gleason Expressway",
                            EMail = "ipsa",
                            GeboorteDatum = new DateTime(2025, 3, 17, 15, 16, 21, 865, DateTimeKind.Local).AddTicks(1667),
                            Naam = "Exercitationem qui quaerat minima repellendus voluptate quos ut modi consequatur et est iure et facilis reiciendis ex sit ipsum nostrum."
                        },
                        new
                        {
                            Id = 20,
                            Adres = "882 Maxwell Plain",
                            EMail = "ut",
                            GeboorteDatum = new DateTime(2024, 9, 27, 11, 55, 13, 906, DateTimeKind.Local).AddTicks(7466),
                            Naam = "Sit ab nihil voluptate saepe nobis omnis vel sunt est similique et amet aut repudiandae libero rerum quia distinctio ut."
                        });
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Leerling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpleidingId")
                        .HasColumnType("int");

                    b.Property<int>("StudentenkaartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpleidingId");

                    b.HasIndex("StudentenkaartId")
                        .IsUnique();

                    b.ToTable("Leerling");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Adres = "107 Metz Summit",
                            EMail = "sunt",
                            GeboorteDatum = new DateTime(2024, 8, 7, 7, 40, 7, 967, DateTimeKind.Local).AddTicks(4419),
                            Naam = "Dolores quidem vel voluptas sed odit aut voluptatem ab voluptatem neque deserunt est omnis ut quas doloremque aspernatur adipisci repudiandae.",
                            OpleidingId = 11,
                            StudentenkaartId = 11
                        },
                        new
                        {
                            Id = 12,
                            Adres = "970 Ashtyn Lodge",
                            EMail = "fugit",
                            GeboorteDatum = new DateTime(2025, 4, 12, 17, 35, 30, 992, DateTimeKind.Local).AddTicks(8806),
                            Naam = "Consequuntur praesentium amet accusamus ipsam molestias facilis ut vel et consequatur adipisci nihil consequuntur veritatis et eum repellendus ipsa iusto.",
                            OpleidingId = 12,
                            StudentenkaartId = 12
                        },
                        new
                        {
                            Id = 13,
                            Adres = "71299 Carter Road",
                            EMail = "praesentium",
                            GeboorteDatum = new DateTime(2024, 8, 22, 20, 47, 51, 819, DateTimeKind.Local).AddTicks(5522),
                            Naam = "Vero aut tenetur velit dolor quidem est eligendi ducimus sunt minus rerum et velit nisi aut est commodi accusantium molestiae.",
                            OpleidingId = 13,
                            StudentenkaartId = 13
                        },
                        new
                        {
                            Id = 14,
                            Adres = "242 Brenda Points",
                            EMail = "eligendi",
                            GeboorteDatum = new DateTime(2025, 4, 12, 0, 0, 58, 534, DateTimeKind.Local).AddTicks(8012),
                            Naam = "Eaque et accusantium dicta sint iste explicabo aut tempora voluptatem placeat ut nobis dolores ut dolores quia eius tempore voluptatum.",
                            OpleidingId = 14,
                            StudentenkaartId = 14
                        },
                        new
                        {
                            Id = 15,
                            Adres = "5432 Zita Ville",
                            EMail = "et",
                            GeboorteDatum = new DateTime(2024, 12, 29, 6, 3, 53, 534, DateTimeKind.Local).AddTicks(5931),
                            Naam = "Minus dolorem voluptate ullam dolor amet soluta est aliquam sed et voluptatibus ut eveniet omnis eos sit neque qui a.",
                            OpleidingId = 15,
                            StudentenkaartId = 15
                        },
                        new
                        {
                            Id = 16,
                            Adres = "09007 Leann Curve",
                            EMail = "aliquam",
                            GeboorteDatum = new DateTime(2024, 6, 6, 23, 53, 21, 375, DateTimeKind.Local).AddTicks(4755),
                            Naam = "Neque autem dignissimos dolore dolores iure voluptatem id sequi voluptas quibusdam et consequatur ad autem nulla doloremque beatae repudiandae quasi.",
                            OpleidingId = 16,
                            StudentenkaartId = 16
                        },
                        new
                        {
                            Id = 17,
                            Adres = "586 Baron Street",
                            EMail = "omnis",
                            GeboorteDatum = new DateTime(2024, 10, 7, 23, 57, 3, 732, DateTimeKind.Local).AddTicks(860),
                            Naam = "Natus aut omnis nobis est ex officiis enim est fugiat non atque ipsum quidem non eveniet enim sit magni aut.",
                            OpleidingId = 17,
                            StudentenkaartId = 17
                        },
                        new
                        {
                            Id = 18,
                            Adres = "15199 Wisoky Lane",
                            EMail = "nihil",
                            GeboorteDatum = new DateTime(2025, 3, 19, 13, 2, 20, 651, DateTimeKind.Local).AddTicks(8589),
                            Naam = "Autem eos inventore provident quos quaerat laboriosam magni rerum aspernatur et quibusdam non id quidem soluta iste repudiandae explicabo minima.",
                            OpleidingId = 18,
                            StudentenkaartId = 18
                        },
                        new
                        {
                            Id = 19,
                            Adres = "02109 Cale Fork",
                            EMail = "autem",
                            GeboorteDatum = new DateTime(2024, 10, 16, 3, 32, 7, 166, DateTimeKind.Local).AddTicks(7896),
                            Naam = "Nulla suscipit minus aliquid libero incidunt quidem dolorem quam esse et aliquam ut vel commodi et alias nesciunt cumque aut.",
                            OpleidingId = 19,
                            StudentenkaartId = 19
                        },
                        new
                        {
                            Id = 20,
                            Adres = "001 Brigitte Course",
                            EMail = "itaque",
                            GeboorteDatum = new DateTime(2025, 1, 28, 1, 32, 22, 191, DateTimeKind.Local).AddTicks(8184),
                            Naam = "Cupiditate vel ipsum quasi non libero autem modi cumque veniam quos quibusdam sit fuga non suscipit excepturi assumenda quasi beatae.",
                            OpleidingId = 20,
                            StudentenkaartId = 20
                        });
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Opleiding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeschikbarePlaatsen")
                        .HasColumnType("int");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duur")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Opleiding");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            BeschikbarePlaatsen = 249,
                            Beschrijving = "Distinctio fugiat consequatur vero ut sunt aut voluptatem et magni perferendis voluptatem in tempora sapiente qui consequatur corporis aut hic.",
                            Duur = 3,
                            Naam = "Sed nihil ut amet qui ut aliquam aut unde quas aperiam sint dolorum quasi asperiores neque provident reprehenderit ad nesciunt."
                        },
                        new
                        {
                            Id = 12,
                            BeschikbarePlaatsen = 324,
                            Beschrijving = "Quia est mollitia voluptatem deleniti delectus aut unde est perferendis eos consequatur dolor eum vero ex laudantium iusto aliquid atque.",
                            Duur = 4,
                            Naam = "Ut impedit ipsum velit nemo sint dolor molestiae aliquid explicabo quos hic aut quasi aliquam ipsa placeat esse fuga et."
                        },
                        new
                        {
                            Id = 13,
                            BeschikbarePlaatsen = 245,
                            Beschrijving = "Sapiente cum consectetur odit eos ipsam et quo enim vel sunt recusandae expedita id et omnis distinctio blanditiis ea molestiae.",
                            Duur = 3,
                            Naam = "Iure voluptatem placeat dolores corrupti dolorum velit illo occaecati aut aliquam perferendis quidem adipisci tempore quod dolorum asperiores esse porro."
                        },
                        new
                        {
                            Id = 14,
                            BeschikbarePlaatsen = 389,
                            Beschrijving = "Consequuntur voluptas iste voluptas eveniet labore sequi officiis cupiditate vel repellat placeat error vitae provident voluptatum aut eveniet ut totam.",
                            Duur = 4,
                            Naam = "Id provident eius delectus explicabo esse in nihil autem aliquid nostrum et quibusdam neque tempora molestiae vitae in voluptas dolore."
                        },
                        new
                        {
                            Id = 15,
                            BeschikbarePlaatsen = 279,
                            Beschrijving = "Ipsa quibusdam aspernatur illo in inventore rem nobis qui voluptas ratione explicabo ipsam laudantium laudantium ea doloremque perferendis magni corporis.",
                            Duur = 3,
                            Naam = "Ipsa eos et iusto quasi quia ipsum placeat aut sed dolor est enim et eius quo rerum dolor aut et."
                        },
                        new
                        {
                            Id = 16,
                            BeschikbarePlaatsen = 355,
                            Beschrijving = "Consequatur praesentium reprehenderit et debitis minima cum quis maxime ut harum voluptatem adipisci facilis earum quia tempore rem non dolore.",
                            Duur = 4,
                            Naam = "Quidem cupiditate labore voluptas deserunt assumenda quaerat sunt voluptatibus sint quaerat assumenda vero ut ut quia aliquid praesentium eveniet illo."
                        },
                        new
                        {
                            Id = 17,
                            BeschikbarePlaatsen = 295,
                            Beschrijving = "Qui iusto dolorem dolores consectetur rerum qui expedita cupiditate tempora sit inventore illum quae consequuntur dolorem perferendis debitis alias ex.",
                            Duur = 4,
                            Naam = "Sequi ea asperiores dolor aut aspernatur temporibus ea odio dolore facere fuga cumque ullam provident culpa et expedita minima exercitationem."
                        },
                        new
                        {
                            Id = 18,
                            BeschikbarePlaatsen = 274,
                            Beschrijving = "Rem possimus ut provident et fuga laborum recusandae molestiae quaerat officia est iusto et quibusdam laboriosam qui modi omnis quia.",
                            Duur = 4,
                            Naam = "Officiis voluptatem minus minima eos maiores ut sed est quibusdam sint aspernatur rerum sit voluptatem qui rem dolores quia iste."
                        },
                        new
                        {
                            Id = 19,
                            BeschikbarePlaatsen = 289,
                            Beschrijving = "Ut aliquam neque aliquam ut sit ad inventore et veritatis omnis a vel quis fugit optio sed ut quae rerum.",
                            Duur = 3,
                            Naam = "Velit est ducimus sint dolorum laudantium est aut consequatur quia minus nesciunt inventore explicabo expedita non placeat ea quam fuga."
                        },
                        new
                        {
                            Id = 20,
                            BeschikbarePlaatsen = 221,
                            Beschrijving = "Ducimus ut saepe dolor reiciendis tempore quo molestiae et voluptatum rerum aut repellat sit optio consequatur totam officia nihil ratione.",
                            Duur = 4,
                            Naam = "Rerum molestias rerum fuga voluptas natus eius dolor hic commodi dolor nulla minima odit expedita quia atque deserunt quos sit."
                        });
                });

            modelBuilder.Entity("SimpleschoolApp.Models.StudentenKaart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Klas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentenKaart");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Klas = "consequatur",
                            Naam = "Marion Price IV",
                            School = "Hirthe - Vandervort"
                        },
                        new
                        {
                            Id = 12,
                            Klas = "asperiores",
                            Naam = "Mr. Raquel Jones",
                            School = "Paucek - Fritsch"
                        },
                        new
                        {
                            Id = 13,
                            Klas = "velit",
                            Naam = "Lora Collins MD",
                            School = "Price - Lynch"
                        },
                        new
                        {
                            Id = 14,
                            Klas = "cupiditate",
                            Naam = "Miss Wendell Hoppe",
                            School = "Mills, Hyatt and Bahringer"
                        },
                        new
                        {
                            Id = 15,
                            Klas = "quas",
                            Naam = "Mrs. Emanuel Ortiz",
                            School = "Fadel Group"
                        },
                        new
                        {
                            Id = 16,
                            Klas = "ducimus",
                            Naam = "Ms. Kay Jaskolski",
                            School = "Conn LLC"
                        },
                        new
                        {
                            Id = 17,
                            Klas = "recusandae",
                            Naam = "George Kshlerin PhD",
                            School = "Block Inc"
                        },
                        new
                        {
                            Id = 18,
                            Klas = "nam",
                            Naam = "Mr. Marianne Altenwerth",
                            School = "Herzog and Sons"
                        },
                        new
                        {
                            Id = 19,
                            Klas = "similique",
                            Naam = "Mr. Frank Haley",
                            School = "O'Kon Inc"
                        },
                        new
                        {
                            Id = 20,
                            Klas = "voluptas",
                            Naam = "Howard Bednar DVM",
                            School = "Hessel - Reichel"
                        });
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Vak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AantalStudiePunten")
                        .HasColumnType("int");

                    b.Property<int>("LeerkrachtId")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Taal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Vaktype")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeerkrachtId");

                    b.ToTable("Vak");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            AantalStudiePunten = 48,
                            LeerkrachtId = 0,
                            Naam = "Miss Kenneth Cassin",
                            Taal = "microchip",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 12,
                            AantalStudiePunten = 27,
                            LeerkrachtId = 0,
                            Naam = "Ms. Craig O'Connell",
                            Taal = "Sharable",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 13,
                            AantalStudiePunten = 49,
                            LeerkrachtId = 0,
                            Naam = "Mrs. Violet Will",
                            Taal = "Sleek",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 14,
                            AantalStudiePunten = 34,
                            LeerkrachtId = 0,
                            Naam = "Jana Heaney IV",
                            Taal = "Licensed",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 15,
                            AantalStudiePunten = 19,
                            LeerkrachtId = 0,
                            Naam = "Crystal Moore IV",
                            Taal = "USB",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 16,
                            AantalStudiePunten = 39,
                            LeerkrachtId = 0,
                            Naam = "Miss Juana Simonis",
                            Taal = "Profit-focused",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 17,
                            AantalStudiePunten = 30,
                            LeerkrachtId = 0,
                            Naam = "Mrs. Bernard Hodkiewicz",
                            Taal = "sensor",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 18,
                            AantalStudiePunten = 23,
                            LeerkrachtId = 0,
                            Naam = "Mrs. Edward Powlowski",
                            Taal = "Bermudian Dollar (customarily known as Bermuda Dollar)",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 19,
                            AantalStudiePunten = 46,
                            LeerkrachtId = 0,
                            Naam = "Traci McLaughlin MD",
                            Taal = "implement",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 20,
                            AantalStudiePunten = 38,
                            LeerkrachtId = 0,
                            Naam = "Ms. Dennis Hyatt",
                            Taal = "Metal",
                            Vaktype = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.HasOne("SimpleschoolApp.Models.Opleiding", null)
                        .WithMany()
                        .HasForeignKey("OpleidingenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleschoolApp.Models.Vak", null)
                        .WithMany()
                        .HasForeignKey("VakkenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Leerling", b =>
                {
                    b.HasOne("SimpleschoolApp.Models.Opleiding", "Opleiding")
                        .WithMany("Leerlingen")
                        .HasForeignKey("OpleidingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleschoolApp.Models.StudentenKaart", "Studentenkaart")
                        .WithOne("Leerling")
                        .HasForeignKey("SimpleschoolApp.Models.Leerling", "StudentenkaartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opleiding");

                    b.Navigation("Studentenkaart");
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Vak", b =>
                {
                    b.HasOne("SimpleschoolApp.Models.Leerkracht", "Leerkracht")
                        .WithMany("Vakken")
                        .HasForeignKey("LeerkrachtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leerkracht");
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Leerkracht", b =>
                {
                    b.Navigation("Vakken");
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Opleiding", b =>
                {
                    b.Navigation("Leerlingen");
                });

            modelBuilder.Entity("SimpleschoolApp.Models.StudentenKaart", b =>
                {
                    b.Navigation("Leerling")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
