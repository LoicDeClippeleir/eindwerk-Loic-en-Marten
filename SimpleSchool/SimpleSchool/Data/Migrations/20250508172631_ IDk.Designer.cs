// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleSchool.Data;

#nullable disable

namespace SimpleSchool.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250508172631_ IDk")]
    partial class IDk
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.Property<int>("OpleidingenId")
                        .HasColumnType("int");

                    b.Property<int>("VakkenId")
                        .HasColumnType("int");

                    b.HasKey("OpleidingenId", "VakkenId");

                    b.HasIndex("VakkenId");

                    b.ToTable("Opleidingsvakken", (string)null);
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Leerkracht", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Leerkracht");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Adres = "438 Swift Forest",
                            EMail = "et",
                            GeboorteDatum = new DateTime(2024, 6, 19, 17, 22, 28, 11, DateTimeKind.Local).AddTicks(2918),
                            Naam = "Nobis est non maxime temporibus ad maxime a non accusantium quas similique voluptas aut dolores aliquid quis est ut qui."
                        },
                        new
                        {
                            Id = 12,
                            Adres = "1340 Leland Motorway",
                            EMail = "ea",
                            GeboorteDatum = new DateTime(2024, 9, 19, 20, 54, 26, 634, DateTimeKind.Local).AddTicks(1542),
                            Naam = "Quia esse est modi ea praesentium molestiae sed sed repellendus veritatis dicta unde consequatur minima ea consectetur doloribus qui ea."
                        },
                        new
                        {
                            Id = 13,
                            Adres = "1734 Donny Vista",
                            EMail = "perferendis",
                            GeboorteDatum = new DateTime(2025, 2, 23, 8, 23, 12, 478, DateTimeKind.Local).AddTicks(2266),
                            Naam = "Velit est fugit in delectus laboriosam quas facere similique rerum quidem eum praesentium beatae architecto temporibus quam repellat adipisci commodi."
                        },
                        new
                        {
                            Id = 14,
                            Adres = "89235 Cleo Shoals",
                            EMail = "illo",
                            GeboorteDatum = new DateTime(2024, 5, 15, 22, 36, 41, 385, DateTimeKind.Local).AddTicks(2683),
                            Naam = "Similique molestias omnis minus voluptas exercitationem et dolores officiis veritatis quidem saepe voluptas quasi rerum repellendus quod commodi quo voluptatem."
                        },
                        new
                        {
                            Id = 15,
                            Adres = "975 Mariano Rest",
                            EMail = "et",
                            GeboorteDatum = new DateTime(2024, 10, 6, 13, 37, 7, 845, DateTimeKind.Local).AddTicks(3218),
                            Naam = "Facere doloremque expedita maiores magnam vel velit voluptatem non exercitationem nemo ratione cumque odio quam voluptate et qui ut occaecati."
                        },
                        new
                        {
                            Id = 16,
                            Adres = "0510 Zane Forest",
                            EMail = "sunt",
                            GeboorteDatum = new DateTime(2024, 7, 1, 15, 17, 27, 366, DateTimeKind.Local).AddTicks(5586),
                            Naam = "Consequuntur voluptatum odit nisi amet sed temporibus dolorem qui maxime voluptatem est tempora aspernatur necessitatibus vel quae incidunt recusandae voluptate."
                        },
                        new
                        {
                            Id = 17,
                            Adres = "61218 Hane Inlet",
                            EMail = "sapiente",
                            GeboorteDatum = new DateTime(2024, 6, 1, 2, 23, 36, 161, DateTimeKind.Local).AddTicks(1589),
                            Naam = "Atque deserunt laboriosam rerum qui quia laboriosam voluptatem beatae nobis cum magnam et quae animi non culpa id dicta in."
                        },
                        new
                        {
                            Id = 18,
                            Adres = "23110 Wiegand Trace",
                            EMail = "consectetur",
                            GeboorteDatum = new DateTime(2025, 2, 26, 20, 36, 5, 656, DateTimeKind.Local).AddTicks(7502),
                            Naam = "Et voluptatem quae voluptatibus rerum praesentium nemo illo tenetur dignissimos voluptatum soluta nam perspiciatis qui tempora est voluptate et animi."
                        },
                        new
                        {
                            Id = 19,
                            Adres = "6896 Carroll Key",
                            EMail = "nam",
                            GeboorteDatum = new DateTime(2025, 4, 28, 1, 38, 57, 953, DateTimeKind.Local).AddTicks(2958),
                            Naam = "Ad ratione enim et id non omnis dolorem magni architecto laborum dolor tenetur eveniet recusandae expedita sed est rem natus."
                        },
                        new
                        {
                            Id = 20,
                            Adres = "43269 Alicia Fords",
                            EMail = "molestiae",
                            GeboorteDatum = new DateTime(2024, 7, 1, 17, 33, 20, 113, DateTimeKind.Local).AddTicks(1862),
                            Naam = "Omnis aut id praesentium soluta recusandae velit voluptate explicabo ducimus saepe minima rerum animi tempore sed qui quae maxime eius."
                        });
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Leerling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpleidingId")
                        .HasColumnType("int");

                    b.Property<int>("StudentenkaartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpleidingId");

                    b.HasIndex("StudentenkaartId")
                        .IsUnique();

                    b.ToTable("Leerling");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Adres = "111 Schroeder Cliff",
                            EMail = "ea",
                            GeboorteDatum = new DateTime(2025, 1, 9, 16, 5, 41, 736, DateTimeKind.Local).AddTicks(1068),
                            Naam = "Aut quas fugiat illo assumenda similique fuga asperiores earum adipisci et quas amet qui inventore beatae autem sit eos consequatur.",
                            OpleidingId = 11,
                            StudentenkaartId = 11
                        },
                        new
                        {
                            Id = 12,
                            Adres = "287 Myles Garden",
                            EMail = "sint",
                            GeboorteDatum = new DateTime(2024, 12, 26, 1, 47, 14, 872, DateTimeKind.Local).AddTicks(4793),
                            Naam = "Sint dolor voluptas quidem odit voluptates rem optio adipisci quas et quod recusandae et ratione rem non sit qui recusandae.",
                            OpleidingId = 12,
                            StudentenkaartId = 12
                        },
                        new
                        {
                            Id = 13,
                            Adres = "0349 Kristopher Orchard",
                            EMail = "rerum",
                            GeboorteDatum = new DateTime(2025, 3, 29, 6, 47, 49, 608, DateTimeKind.Local).AddTicks(4718),
                            Naam = "Qui ut alias aut doloremque sit explicabo natus sunt ut facere odit tenetur cupiditate consequatur qui velit corrupti autem aspernatur.",
                            OpleidingId = 13,
                            StudentenkaartId = 13
                        },
                        new
                        {
                            Id = 14,
                            Adres = "712 Jon Mountains",
                            EMail = "eos",
                            GeboorteDatum = new DateTime(2024, 8, 30, 17, 11, 26, 955, DateTimeKind.Local).AddTicks(2147),
                            Naam = "Non ut corporis sint minus assumenda totam molestias sunt asperiores non pariatur eaque illo cumque non repudiandae accusantium qui quo.",
                            OpleidingId = 14,
                            StudentenkaartId = 14
                        },
                        new
                        {
                            Id = 15,
                            Adres = "8688 Hyatt Ramp",
                            EMail = "neque",
                            GeboorteDatum = new DateTime(2024, 9, 27, 20, 21, 27, 108, DateTimeKind.Local).AddTicks(8895),
                            Naam = "Blanditiis quisquam cupiditate distinctio est harum magni voluptas voluptatem doloribus libero est impedit quos at inventore consequuntur quasi explicabo molestiae.",
                            OpleidingId = 15,
                            StudentenkaartId = 15
                        },
                        new
                        {
                            Id = 16,
                            Adres = "65569 Chadrick River",
                            EMail = "voluptatem",
                            GeboorteDatum = new DateTime(2024, 12, 17, 20, 26, 20, 296, DateTimeKind.Local).AddTicks(7852),
                            Naam = "Ea quo sed voluptates totam molestias voluptatum illo esse qui occaecati aperiam totam iure aliquid aspernatur aut ducimus velit voluptas.",
                            OpleidingId = 16,
                            StudentenkaartId = 16
                        },
                        new
                        {
                            Id = 17,
                            Adres = "7728 Muller Ridge",
                            EMail = "autem",
                            GeboorteDatum = new DateTime(2024, 9, 1, 18, 18, 32, 951, DateTimeKind.Local).AddTicks(3607),
                            Naam = "Quos nesciunt voluptatem ut assumenda ea magni repellat dolores voluptatem nihil repellendus odio ut accusamus quaerat dolorem consequatur veritatis similique.",
                            OpleidingId = 17,
                            StudentenkaartId = 17
                        },
                        new
                        {
                            Id = 18,
                            Adres = "03475 Fahey Camp",
                            EMail = "neque",
                            GeboorteDatum = new DateTime(2025, 3, 10, 5, 55, 39, 640, DateTimeKind.Local).AddTicks(7856),
                            Naam = "Quia quasi quisquam reprehenderit omnis placeat aliquam et minima non qui autem possimus earum velit praesentium aut velit nesciunt nisi.",
                            OpleidingId = 18,
                            StudentenkaartId = 18
                        },
                        new
                        {
                            Id = 19,
                            Adres = "3394 Ebert Landing",
                            EMail = "eum",
                            GeboorteDatum = new DateTime(2025, 2, 23, 1, 43, 54, 440, DateTimeKind.Local).AddTicks(1158),
                            Naam = "Impedit et praesentium voluptatem culpa doloribus illum delectus consectetur optio sed velit necessitatibus autem possimus nihil laudantium sit amet omnis.",
                            OpleidingId = 19,
                            StudentenkaartId = 19
                        },
                        new
                        {
                            Id = 20,
                            Adres = "70612 Thea Corner",
                            EMail = "accusantium",
                            GeboorteDatum = new DateTime(2025, 5, 6, 1, 37, 42, 40, DateTimeKind.Local).AddTicks(3291),
                            Naam = "Quis dignissimos voluptatem est pariatur et deleniti inventore cum aspernatur suscipit eum eos rerum error aut ullam sint animi consequatur.",
                            OpleidingId = 20,
                            StudentenkaartId = 20
                        });
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Opleiding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeschikbarePlaatsen")
                        .HasColumnType("int");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duur")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Opleiding");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            BeschikbarePlaatsen = 244,
                            Beschrijving = "Autem ipsa earum et autem in earum labore quas modi tempora est unde et vero dicta qui aut non quo.",
                            Duur = 4,
                            Naam = "Sapiente quo et quia incidunt aut culpa molestias ut modi error blanditiis quibusdam iusto odio ut est aut est porro."
                        },
                        new
                        {
                            Id = 12,
                            BeschikbarePlaatsen = 238,
                            Beschrijving = "Blanditiis rerum soluta sit eos molestias ut adipisci qui enim ut aperiam impedit eligendi quisquam accusantium quia velit nostrum odit.",
                            Duur = 4,
                            Naam = "Dolorem error quasi saepe hic totam natus dignissimos animi consequatur sed qui soluta magnam similique facere quis ratione aut quia."
                        },
                        new
                        {
                            Id = 13,
                            BeschikbarePlaatsen = 339,
                            Beschrijving = "Facilis modi deleniti debitis esse consequatur et doloribus aliquid nesciunt velit veniam perferendis quidem debitis saepe quas harum rerum dolorem.",
                            Duur = 4,
                            Naam = "Sed quas saepe in eligendi rerum sequi ut qui et sed laborum non unde aut odit ad illo odit nulla."
                        },
                        new
                        {
                            Id = 14,
                            BeschikbarePlaatsen = 390,
                            Beschrijving = "Ab consequuntur fuga et sequi cumque quae aut consequatur perferendis dicta similique aliquam consequuntur ad voluptas minima aliquam rerum harum.",
                            Duur = 4,
                            Naam = "Dignissimos ipsa sed dolorem dolorem et dolor error quod quod assumenda unde odio nihil magnam et quis laboriosam ut iure."
                        },
                        new
                        {
                            Id = 15,
                            BeschikbarePlaatsen = 330,
                            Beschrijving = "Soluta occaecati quia eum unde saepe recusandae autem quia et consequatur impedit quo ut aut cumque enim quo non similique.",
                            Duur = 3,
                            Naam = "Ut saepe sit sit labore accusamus sunt natus est consequatur maxime aspernatur ipsam impedit iusto expedita dolorem est et sed."
                        },
                        new
                        {
                            Id = 16,
                            BeschikbarePlaatsen = 361,
                            Beschrijving = "Dignissimos sit ipsa inventore eius velit eos non id quae cumque quae distinctio earum quam modi nam ut accusantium est.",
                            Duur = 4,
                            Naam = "Sunt qui placeat ullam natus qui rerum voluptas earum dolor laborum aspernatur et sapiente non praesentium id quasi provident in."
                        },
                        new
                        {
                            Id = 17,
                            BeschikbarePlaatsen = 390,
                            Beschrijving = "Rem facere similique enim sed error in ut sapiente modi amet vero facere vel laborum est tempore et animi et.",
                            Duur = 4,
                            Naam = "Cum fuga qui iusto iste vel odit et consequatur at ut aperiam molestiae facere repudiandae autem ratione optio aliquid aperiam."
                        },
                        new
                        {
                            Id = 18,
                            BeschikbarePlaatsen = 353,
                            Beschrijving = "Quo id facere sit vero facere et placeat temporibus saepe et aperiam et unde beatae quis officiis dignissimos ut dolor.",
                            Duur = 3,
                            Naam = "Cumque tempore est voluptas rerum blanditiis error temporibus sed molestiae accusamus ut officia in excepturi alias sapiente perspiciatis beatae distinctio."
                        },
                        new
                        {
                            Id = 19,
                            BeschikbarePlaatsen = 346,
                            Beschrijving = "Rerum quisquam quia asperiores est culpa vel quia vitae fugiat temporibus sit qui illum eveniet consequatur consectetur mollitia quis quia.",
                            Duur = 4,
                            Naam = "Est voluptas molestiae odit vel hic tempora perferendis non consequuntur quia quia incidunt voluptates est sed magni dicta fugiat fuga."
                        },
                        new
                        {
                            Id = 20,
                            BeschikbarePlaatsen = 342,
                            Beschrijving = "Doloribus et accusamus quae vel excepturi ducimus suscipit voluptatem incidunt consequuntur eveniet voluptatem et ut voluptates facere nam est at.",
                            Duur = 4,
                            Naam = "Voluptatem consequatur quisquam sed asperiores eius accusantium eaque vel quod qui neque dicta maxime dolor delectus doloribus rerum assumenda eligendi."
                        });
                });

            modelBuilder.Entity("SimpleschoolApp.Models.StudentenKaart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Klas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentenKaart");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Klas = "quasi",
                            Naam = "Vernon Parisian II",
                            School = "Ondricka LLC"
                        },
                        new
                        {
                            Id = 12,
                            Klas = "inventore",
                            Naam = "Ms. Jonathon Berge",
                            School = "Bruen, Heaney and Bruen"
                        },
                        new
                        {
                            Id = 13,
                            Klas = "deleniti",
                            Naam = "Ms. Peggy Morissette",
                            School = "Wunsch - Crona"
                        },
                        new
                        {
                            Id = 14,
                            Klas = "qui",
                            Naam = "Marcia Price PhD",
                            School = "Schmidt, White and Reilly"
                        },
                        new
                        {
                            Id = 15,
                            Klas = "et",
                            Naam = "Hope McKenzie III",
                            School = "Schroeder - McLaughlin"
                        },
                        new
                        {
                            Id = 16,
                            Klas = "quo",
                            Naam = "Stacy Johns DVM",
                            School = "Reichel and Sons"
                        },
                        new
                        {
                            Id = 17,
                            Klas = "aut",
                            Naam = "Kristine Ward IV",
                            School = "Casper Group"
                        },
                        new
                        {
                            Id = 18,
                            Klas = "eos",
                            Naam = "Miss Ora Wyman",
                            School = "Mertz, Willms and Rolfson"
                        },
                        new
                        {
                            Id = 19,
                            Klas = "tenetur",
                            Naam = "Mr. Georgia Bailey",
                            School = "Kessler, White and Christiansen"
                        },
                        new
                        {
                            Id = 20,
                            Klas = "veniam",
                            Naam = "Ms. William Kub",
                            School = "Raynor LLC"
                        });
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Vak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AantalStudiePunten")
                        .HasColumnType("int");

                    b.Property<int>("LeerkrachtId")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Taal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Vaktype")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeerkrachtId");

                    b.ToTable("Vak");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            AantalStudiePunten = 29,
                            LeerkrachtId = 0,
                            Naam = "Dr. Tami Auer",
                            Taal = "project",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 12,
                            AantalStudiePunten = 29,
                            LeerkrachtId = 0,
                            Naam = "Ms. Jeffery Hartmann",
                            Taal = "Plastic",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 13,
                            AantalStudiePunten = 34,
                            LeerkrachtId = 0,
                            Naam = "Mr. Cameron Cormier",
                            Taal = "Consultant",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 14,
                            AantalStudiePunten = 27,
                            LeerkrachtId = 0,
                            Naam = "Sandra Hettinger MD",
                            Taal = "applications",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 15,
                            AantalStudiePunten = 20,
                            LeerkrachtId = 0,
                            Naam = "Ollie Steuber MD",
                            Taal = "connecting",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 16,
                            AantalStudiePunten = 15,
                            LeerkrachtId = 0,
                            Naam = "Benjamin Schmitt III",
                            Taal = "invoice",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 17,
                            AantalStudiePunten = 13,
                            LeerkrachtId = 0,
                            Naam = "Mrs. Lance Hyatt",
                            Taal = "Oklahoma",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 18,
                            AantalStudiePunten = 42,
                            LeerkrachtId = 0,
                            Naam = "Ms. Jodi Streich",
                            Taal = "Ergonomic",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 19,
                            AantalStudiePunten = 25,
                            LeerkrachtId = 0,
                            Naam = "Micheal O'Keefe Jr.",
                            Taal = "leading edge",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 20,
                            AantalStudiePunten = 31,
                            LeerkrachtId = 0,
                            Naam = "Luke Ziemann Jr.",
                            Taal = "Direct",
                            Vaktype = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.HasOne("SimpleschoolApp.Models.Opleiding", null)
                        .WithMany()
                        .HasForeignKey("OpleidingenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleschoolApp.Models.Vak", null)
                        .WithMany()
                        .HasForeignKey("VakkenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Leerling", b =>
                {
                    b.HasOne("SimpleschoolApp.Models.Opleiding", "Opleiding")
                        .WithMany("Leerlingen")
                        .HasForeignKey("OpleidingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleschoolApp.Models.StudentenKaart", "Studentenkaart")
                        .WithOne("Leerling")
                        .HasForeignKey("SimpleschoolApp.Models.Leerling", "StudentenkaartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opleiding");

                    b.Navigation("Studentenkaart");
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Vak", b =>
                {
                    b.HasOne("SimpleschoolApp.Models.Leerkracht", "Leerkracht")
                        .WithMany("Vakken")
                        .HasForeignKey("LeerkrachtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leerkracht");
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Leerkracht", b =>
                {
                    b.Navigation("Vakken");
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Opleiding", b =>
                {
                    b.Navigation("Leerlingen");
                });

            modelBuilder.Entity("SimpleschoolApp.Models.StudentenKaart", b =>
                {
                    b.Navigation("Leerling")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
