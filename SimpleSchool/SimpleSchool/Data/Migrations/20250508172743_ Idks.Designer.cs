// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleSchool.Data;

#nullable disable

namespace SimpleSchool.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250508172743_ Idks")]
    partial class Idks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.Property<int>("OpleidingenId")
                        .HasColumnType("int");

                    b.Property<int>("VakkenId")
                        .HasColumnType("int");

                    b.HasKey("OpleidingenId", "VakkenId");

                    b.HasIndex("VakkenId");

                    b.ToTable("Opleidingsvakken", (string)null);
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Leerkracht", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Leerkracht");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Adres = "231 Selena Mission",
                            EMail = "qui",
                            GeboorteDatum = new DateTime(2025, 1, 19, 17, 15, 44, 526, DateTimeKind.Local).AddTicks(6447),
                            Naam = "Rem maiores enim dignissimos quibusdam hic corporis ipsum asperiores ut et deleniti sunt explicabo et quasi fugit dignissimos illum porro."
                        },
                        new
                        {
                            Id = 12,
                            Adres = "699 Joany Pine",
                            EMail = "dolor",
                            GeboorteDatum = new DateTime(2024, 5, 30, 23, 16, 56, 20, DateTimeKind.Local).AddTicks(142),
                            Naam = "Et repudiandae natus qui magnam maxime quia culpa minima eaque deleniti et veritatis qui sunt dolores omnis excepturi aliquid repellat."
                        },
                        new
                        {
                            Id = 13,
                            Adres = "302 Schneider Track",
                            EMail = "labore",
                            GeboorteDatum = new DateTime(2025, 1, 19, 18, 13, 33, 187, DateTimeKind.Local).AddTicks(333),
                            Naam = "Officiis voluptatem voluptatibus aliquid tempore sunt placeat voluptatem deserunt non nulla vitae provident voluptatibus tempore doloremque ut velit voluptas ipsum."
                        },
                        new
                        {
                            Id = 14,
                            Adres = "269 Amelie Walk",
                            EMail = "rerum",
                            GeboorteDatum = new DateTime(2025, 2, 7, 19, 3, 59, 470, DateTimeKind.Local).AddTicks(4300),
                            Naam = "Eveniet labore voluptatum non sit ad et consequatur dolor accusantium hic molestias aliquid est laborum quia illum quo tempore laboriosam."
                        },
                        new
                        {
                            Id = 15,
                            Adres = "5745 Erdman Pike",
                            EMail = "repudiandae",
                            GeboorteDatum = new DateTime(2024, 11, 2, 23, 35, 43, 94, DateTimeKind.Local).AddTicks(3718),
                            Naam = "Rerum animi cum cumque maxime aperiam sint voluptas voluptatem ad sint ut et tempore eveniet aut quis aut vel quasi."
                        },
                        new
                        {
                            Id = 16,
                            Adres = "657 Lebsack Street",
                            EMail = "et",
                            GeboorteDatum = new DateTime(2024, 7, 29, 12, 11, 13, 581, DateTimeKind.Local).AddTicks(7571),
                            Naam = "Minima ullam placeat quasi voluptatibus incidunt dolores sed laudantium dicta consequatur est deleniti repellendus repellendus ut molestias nobis a voluptatibus."
                        },
                        new
                        {
                            Id = 17,
                            Adres = "7538 Vivienne Ways",
                            EMail = "sit",
                            GeboorteDatum = new DateTime(2024, 10, 13, 22, 27, 13, 799, DateTimeKind.Local).AddTicks(3003),
                            Naam = "Eos et est voluptate qui praesentium laborum praesentium vitae eaque odio omnis saepe fuga ea omnis occaecati eveniet odit quos."
                        },
                        new
                        {
                            Id = 18,
                            Adres = "663 Lydia Crossing",
                            EMail = "vero",
                            GeboorteDatum = new DateTime(2024, 11, 14, 15, 9, 28, 618, DateTimeKind.Local).AddTicks(7737),
                            Naam = "Quaerat excepturi beatae tempora deserunt non corrupti expedita eius ipsum nisi qui dicta sint officiis necessitatibus non tenetur perferendis praesentium."
                        },
                        new
                        {
                            Id = 19,
                            Adres = "69556 Dangelo Via",
                            EMail = "dolorum",
                            GeboorteDatum = new DateTime(2025, 2, 6, 1, 50, 21, 107, DateTimeKind.Local).AddTicks(6984),
                            Naam = "Mollitia aut labore aut unde minus odit odit placeat saepe atque porro harum voluptatem fugiat omnis ut earum facere in."
                        },
                        new
                        {
                            Id = 20,
                            Adres = "6426 Haven Pike",
                            EMail = "beatae",
                            GeboorteDatum = new DateTime(2024, 9, 2, 10, 5, 35, 583, DateTimeKind.Local).AddTicks(941),
                            Naam = "Enim voluptatum expedita quia qui libero dolorem ab ratione quisquam aliquam earum minus modi similique qui beatae natus sint architecto."
                        });
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Leerling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpleidingId")
                        .HasColumnType("int");

                    b.Property<int>("StudentenkaartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpleidingId");

                    b.HasIndex("StudentenkaartId")
                        .IsUnique();

                    b.ToTable("Leerling");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Adres = "79835 Easter Locks",
                            EMail = "qui",
                            GeboorteDatum = new DateTime(2025, 3, 28, 6, 4, 4, 853, DateTimeKind.Local).AddTicks(6553),
                            Naam = "Est repellendus laboriosam enim ut ea fugit sit consectetur praesentium ipsum vel voluptatem consequatur dolor consectetur est dicta nihil veniam.",
                            OpleidingId = 11,
                            StudentenkaartId = 11
                        },
                        new
                        {
                            Id = 12,
                            Adres = "697 Graham Well",
                            EMail = "fuga",
                            GeboorteDatum = new DateTime(2024, 12, 26, 10, 56, 1, 932, DateTimeKind.Local).AddTicks(5730),
                            Naam = "Nesciunt sit perspiciatis sunt similique odio ea rem possimus vero vitae dolorem doloribus officia in est aut enim est possimus.",
                            OpleidingId = 12,
                            StudentenkaartId = 12
                        },
                        new
                        {
                            Id = 13,
                            Adres = "861 Hillary Run",
                            EMail = "omnis",
                            GeboorteDatum = new DateTime(2024, 8, 24, 6, 36, 33, 881, DateTimeKind.Local).AddTicks(9565),
                            Naam = "Neque voluptatibus consequuntur numquam deleniti aut error quia odit accusamus sit dolore vel et odit laborum quae nihil sint voluptatem.",
                            OpleidingId = 13,
                            StudentenkaartId = 13
                        },
                        new
                        {
                            Id = 14,
                            Adres = "2341 Carol Shoal",
                            EMail = "numquam",
                            GeboorteDatum = new DateTime(2024, 7, 3, 19, 1, 25, 435, DateTimeKind.Local).AddTicks(5990),
                            Naam = "Qui iure voluptatem deserunt quo animi delectus omnis ut nesciunt fugit qui atque inventore sunt harum quos vero ipsum accusamus.",
                            OpleidingId = 14,
                            StudentenkaartId = 14
                        },
                        new
                        {
                            Id = 15,
                            Adres = "65915 Malcolm Tunnel",
                            EMail = "voluptates",
                            GeboorteDatum = new DateTime(2024, 8, 1, 22, 47, 50, 768, DateTimeKind.Local).AddTicks(6571),
                            Naam = "Aliquam voluptatibus quo impedit architecto aut tempora dolorem totam itaque et sapiente ex et itaque qui quo quibusdam molestiae est.",
                            OpleidingId = 15,
                            StudentenkaartId = 15
                        },
                        new
                        {
                            Id = 16,
                            Adres = "307 Freddie Streets",
                            EMail = "beatae",
                            GeboorteDatum = new DateTime(2024, 5, 26, 23, 26, 2, 252, DateTimeKind.Local).AddTicks(5745),
                            Naam = "Veniam molestias quisquam ab aliquid veritatis ut animi velit provident debitis repudiandae ut quaerat perspiciatis vero qui qui tempora soluta.",
                            OpleidingId = 16,
                            StudentenkaartId = 16
                        },
                        new
                        {
                            Id = 17,
                            Adres = "889 Bogan Stream",
                            EMail = "voluptate",
                            GeboorteDatum = new DateTime(2025, 1, 4, 9, 1, 20, 319, DateTimeKind.Local).AddTicks(5526),
                            Naam = "Eius enim quia adipisci dolor explicabo ipsum similique dicta deserunt tempora delectus ullam ex inventore nam est consequatur ducimus et.",
                            OpleidingId = 17,
                            StudentenkaartId = 17
                        },
                        new
                        {
                            Id = 18,
                            Adres = "216 Genevieve Tunnel",
                            EMail = "tenetur",
                            GeboorteDatum = new DateTime(2025, 4, 20, 13, 7, 57, 28, DateTimeKind.Local).AddTicks(8514),
                            Naam = "Et labore libero optio ipsa voluptatem quibusdam voluptas doloremque perferendis quia porro nulla et odio dolor consectetur earum quia iste.",
                            OpleidingId = 18,
                            StudentenkaartId = 18
                        },
                        new
                        {
                            Id = 19,
                            Adres = "772 Lolita Knolls",
                            EMail = "est",
                            GeboorteDatum = new DateTime(2025, 1, 8, 16, 15, 22, 197, DateTimeKind.Local).AddTicks(5827),
                            Naam = "Incidunt animi temporibus illo magnam aliquam distinctio necessitatibus sit aut ea corporis distinctio consequatur ut vel praesentium expedita laudantium reiciendis.",
                            OpleidingId = 19,
                            StudentenkaartId = 19
                        },
                        new
                        {
                            Id = 20,
                            Adres = "865 Augusta Spring",
                            EMail = "asperiores",
                            GeboorteDatum = new DateTime(2025, 4, 20, 0, 4, 40, 848, DateTimeKind.Local).AddTicks(9273),
                            Naam = "Velit sit assumenda quod repellat odio quam culpa tempore ut itaque ad voluptas et omnis ut maiores et culpa repellat.",
                            OpleidingId = 20,
                            StudentenkaartId = 20
                        });
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Opleiding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeschikbarePlaatsen")
                        .HasColumnType("int");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duur")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Opleiding");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            BeschikbarePlaatsen = 359,
                            Beschrijving = "Doloremque facilis rem rerum temporibus provident quis id quo doloremque occaecati quasi quae ut debitis officiis similique ex aliquid omnis.",
                            Duur = 3,
                            Naam = "Doloremque sed earum illo quibusdam deserunt est mollitia aut quos iure possimus ducimus est facere voluptatibus omnis magnam aliquam aut."
                        },
                        new
                        {
                            Id = 12,
                            BeschikbarePlaatsen = 397,
                            Beschrijving = "Sit nihil excepturi explicabo quia amet repellendus cum neque iure id eius possimus eveniet quos est enim veritatis quo odio.",
                            Duur = 4,
                            Naam = "Est velit at eaque quia modi sit beatae accusantium quasi occaecati voluptatem temporibus in ratione nesciunt qui aut sed occaecati."
                        },
                        new
                        {
                            Id = 13,
                            BeschikbarePlaatsen = 256,
                            Beschrijving = "Libero explicabo non sunt vel aspernatur et in aliquid asperiores a eaque repellat sed magni et et dolor incidunt sequi.",
                            Duur = 4,
                            Naam = "Sunt dolorem sapiente similique repellat voluptas nobis explicabo natus qui voluptatem eum natus velit dolorem omnis porro eos ipsum est."
                        },
                        new
                        {
                            Id = 14,
                            BeschikbarePlaatsen = 346,
                            Beschrijving = "Et impedit consectetur quas repudiandae voluptas provident excepturi est occaecati tempore et quam illum reiciendis nihil et magnam similique veniam.",
                            Duur = 3,
                            Naam = "Sed neque nesciunt nostrum et voluptas fugit ea et aut earum at fugiat inventore et iure eligendi id excepturi tempore."
                        },
                        new
                        {
                            Id = 15,
                            BeschikbarePlaatsen = 342,
                            Beschrijving = "Odit illo dignissimos repudiandae molestiae aut asperiores sunt rem hic a enim qui voluptas iusto fugiat quas enim amet odit.",
                            Duur = 3,
                            Naam = "Saepe eum in sit autem velit aut consectetur nostrum et qui ut facere vero debitis quisquam fuga adipisci nobis perferendis."
                        },
                        new
                        {
                            Id = 16,
                            BeschikbarePlaatsen = 312,
                            Beschrijving = "Ut corrupti vel quia aliquid enim adipisci et quam ut aut quos qui unde qui quibusdam labore cum autem maxime.",
                            Duur = 4,
                            Naam = "Cumque nam a quos accusamus laboriosam similique et laboriosam in magnam est dolorum voluptatum ut corporis maiores quos assumenda dolore."
                        },
                        new
                        {
                            Id = 17,
                            BeschikbarePlaatsen = 206,
                            Beschrijving = "Tempore ducimus sint odio velit sunt quibusdam aut magnam perferendis dolor nulla aliquam dolore distinctio doloribus suscipit eos esse consequuntur.",
                            Duur = 4,
                            Naam = "Optio quaerat ad quidem quia repudiandae nulla reprehenderit omnis excepturi aut voluptatem ullam voluptates vel consequuntur molestiae iusto quis rerum."
                        },
                        new
                        {
                            Id = 18,
                            BeschikbarePlaatsen = 283,
                            Beschrijving = "Est molestiae sint qui doloremque quidem et eligendi sed incidunt eos quia optio et fugit dolores et inventore error deleniti.",
                            Duur = 3,
                            Naam = "Voluptates sunt sapiente porro dolor corrupti et vero tempora soluta et totam voluptates dolor delectus qui sint est vel possimus."
                        },
                        new
                        {
                            Id = 19,
                            BeschikbarePlaatsen = 256,
                            Beschrijving = "Quo ipsam assumenda quod sit consectetur odio amet voluptatem voluptas animi incidunt sint dolor debitis maxime consequuntur sunt neque harum.",
                            Duur = 3,
                            Naam = "Odio soluta explicabo accusamus qui dolores sint quos minima et dolorum vel aliquam consectetur cupiditate est velit unde porro sequi."
                        },
                        new
                        {
                            Id = 20,
                            BeschikbarePlaatsen = 302,
                            Beschrijving = "Voluptate deserunt quis eos et ex deserunt nemo nulla earum optio suscipit dignissimos laborum doloribus aut est dolorum ducimus reiciendis.",
                            Duur = 3,
                            Naam = "Beatae accusamus sed eligendi et ullam id et sed consequatur consequatur error voluptates quis a deleniti voluptate ut tempore voluptatem."
                        });
                });

            modelBuilder.Entity("SimpleschoolApp.Models.StudentenKaart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Klas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentenKaart");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Klas = "quam",
                            Naam = "Suzanne Howell PhD",
                            School = "Wilkinson - Anderson"
                        },
                        new
                        {
                            Id = 12,
                            Klas = "quas",
                            Naam = "Shelley Lindgren DDS",
                            School = "Abshire Group"
                        },
                        new
                        {
                            Id = 13,
                            Klas = "accusantium",
                            Naam = "Mrs. Silvia Cremin",
                            School = "Grimes LLC"
                        },
                        new
                        {
                            Id = 14,
                            Klas = "cupiditate",
                            Naam = "Nora Lubowitz DDS",
                            School = "Erdman, Wilderman and Gleason"
                        },
                        new
                        {
                            Id = 15,
                            Klas = "odio",
                            Naam = "Dr. Wilbur Hagenes",
                            School = "Hickle, Hilll and Wyman"
                        },
                        new
                        {
                            Id = 16,
                            Klas = "quo",
                            Naam = "Marion Parisian MD",
                            School = "Yundt and Sons"
                        },
                        new
                        {
                            Id = 17,
                            Klas = "fugit",
                            Naam = "Dr. Natalie Koss",
                            School = "Lynch - Feeney"
                        },
                        new
                        {
                            Id = 18,
                            Klas = "harum",
                            Naam = "Dr. Arturo Von",
                            School = "Simonis - Barrows"
                        },
                        new
                        {
                            Id = 19,
                            Klas = "rerum",
                            Naam = "Mrs. Essie Botsford",
                            School = "Davis Group"
                        },
                        new
                        {
                            Id = 20,
                            Klas = "cupiditate",
                            Naam = "Martha Bahringer DVM",
                            School = "Reynolds - Beahan"
                        });
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Vak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AantalStudiePunten")
                        .HasColumnType("int");

                    b.Property<int>("LeerkrachtId")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Taal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Vaktype")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeerkrachtId");

                    b.ToTable("Vak");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            AantalStudiePunten = 22,
                            LeerkrachtId = 0,
                            Naam = "Rex Kutch MD",
                            Taal = "content",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 12,
                            AantalStudiePunten = 42,
                            LeerkrachtId = 0,
                            Naam = "Ms. Henrietta Jacobi",
                            Taal = "generating",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 13,
                            AantalStudiePunten = 35,
                            LeerkrachtId = 0,
                            Naam = "Amos Robel Jr.",
                            Taal = "Jewelery",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 14,
                            AantalStudiePunten = 12,
                            LeerkrachtId = 0,
                            Naam = "Ronnie Rohan Sr.",
                            Taal = "Unbranded",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 15,
                            AantalStudiePunten = 24,
                            LeerkrachtId = 0,
                            Naam = "Mrs. Laurie Jerde",
                            Taal = "Unbranded",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 16,
                            AantalStudiePunten = 38,
                            LeerkrachtId = 0,
                            Naam = "Mr. Arlene Gorczany",
                            Taal = "Checking Account",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 17,
                            AantalStudiePunten = 25,
                            LeerkrachtId = 0,
                            Naam = "Donnie Kuhn DVM",
                            Taal = "invoice",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 18,
                            AantalStudiePunten = 44,
                            LeerkrachtId = 0,
                            Naam = "Mrs. Donald Quigley",
                            Taal = "Programmable",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 19,
                            AantalStudiePunten = 13,
                            LeerkrachtId = 0,
                            Naam = "Eileen Rippin II",
                            Taal = "generating",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 20,
                            AantalStudiePunten = 31,
                            LeerkrachtId = 0,
                            Naam = "Dr. Carroll Larkin",
                            Taal = "Senior",
                            Vaktype = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.HasOne("SimpleschoolApp.Models.Opleiding", null)
                        .WithMany()
                        .HasForeignKey("OpleidingenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleschoolApp.Models.Vak", null)
                        .WithMany()
                        .HasForeignKey("VakkenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Leerling", b =>
                {
                    b.HasOne("SimpleschoolApp.Models.Opleiding", "Opleiding")
                        .WithMany("Leerlingen")
                        .HasForeignKey("OpleidingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleschoolApp.Models.StudentenKaart", "Studentenkaart")
                        .WithOne("Leerling")
                        .HasForeignKey("SimpleschoolApp.Models.Leerling", "StudentenkaartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opleiding");

                    b.Navigation("Studentenkaart");
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Vak", b =>
                {
                    b.HasOne("SimpleschoolApp.Models.Leerkracht", "Leerkracht")
                        .WithMany("Vakken")
                        .HasForeignKey("LeerkrachtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leerkracht");
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Leerkracht", b =>
                {
                    b.Navigation("Vakken");
                });

            modelBuilder.Entity("SimpleschoolApp.Models.Opleiding", b =>
                {
                    b.Navigation("Leerlingen");
                });

            modelBuilder.Entity("SimpleschoolApp.Models.StudentenKaart", b =>
                {
                    b.Navigation("Leerling")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
