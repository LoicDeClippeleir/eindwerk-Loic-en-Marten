// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleSchool.Data;

#nullable disable

namespace SimpleSchool.Migrations
{
    [DbContext(typeof(SimpleSchoolContext))]
    [Migration("20250516130111_Leerkracht vanachtere")]
    partial class Leerkrachtvanachtere
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.Property<int>("OpleidingenId")
                        .HasColumnType("int");

                    b.Property<int>("VakkenId")
                        .HasColumnType("int");

                    b.HasKey("OpleidingenId", "VakkenId");

                    b.HasIndex("VakkenId");

                    b.ToTable("Opleidingsvakken", (string)null);
                });

            modelBuilder.Entity("Simpleschool.Models.Leerkracht", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Leerkracht");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adres = "Stijnhof 992 III",
                            EMail = "cumque",
                            GeboorteDatum = new DateTime(2025, 4, 18, 5, 36, 2, 377, DateTimeKind.Local).AddTicks(9991),
                            Naam = "In eum qui explicabo quod optio harum nesciunt ipsa quo occaecati deserunt nam quo in aut est sunt a omnis."
                        },
                        new
                        {
                            Id = 2,
                            Adres = "Hendriksstraat 271 I",
                            EMail = "quasi",
                            GeboorteDatum = new DateTime(2024, 12, 3, 9, 57, 41, 24, DateTimeKind.Local).AddTicks(8467),
                            Naam = "Sapiente deserunt amet fugit placeat voluptates perferendis consequatur quis iusto sint nihil eligendi labore voluptatem enim provident at minima consectetur."
                        },
                        new
                        {
                            Id = 3,
                            Adres = "Maasplein 5",
                            EMail = "necessitatibus",
                            GeboorteDatum = new DateTime(2024, 6, 10, 19, 37, 45, 459, DateTimeKind.Local).AddTicks(2279),
                            Naam = "Necessitatibus qui vel officia at sint provident voluptas ipsum architecto tenetur totam sunt at doloribus fuga dolorum laudantium incidunt deserunt."
                        },
                        new
                        {
                            Id = 4,
                            Adres = "Hoekstraat 98",
                            EMail = "et",
                            GeboorteDatum = new DateTime(2025, 5, 1, 19, 26, 44, 106, DateTimeKind.Local).AddTicks(4104),
                            Naam = "Voluptas magni inventore voluptatibus dolor recusandae deleniti voluptas dolor non non aliquid et temporibus non nisi assumenda quibusdam in labore."
                        },
                        new
                        {
                            Id = 5,
                            Adres = "Milansteeg 65",
                            EMail = "commodi",
                            GeboorteDatum = new DateTime(2025, 2, 26, 7, 54, 29, 680, DateTimeKind.Local).AddTicks(2271),
                            Naam = "Omnis voluptatem qui necessitatibus et et at alias asperiores exercitationem quia nobis sit enim autem ut aliquid dolorem omnis repellat."
                        },
                        new
                        {
                            Id = 6,
                            Adres = "Nicksteeg 266",
                            EMail = "cum",
                            GeboorteDatum = new DateTime(2024, 5, 29, 20, 44, 49, 157, DateTimeKind.Local).AddTicks(1356),
                            Naam = "Accusamus fugiat magnam in perspiciatis qui eos dolore est earum dolores adipisci occaecati qui fuga eum odio libero eos qui."
                        },
                        new
                        {
                            Id = 7,
                            Adres = "Sanderhof 495a",
                            EMail = "ipsa",
                            GeboorteDatum = new DateTime(2024, 6, 21, 13, 53, 11, 185, DateTimeKind.Local).AddTicks(1117),
                            Naam = "Porro rerum neque vel alias doloribus voluptas suscipit enim voluptas quas praesentium labore eum omnis et reiciendis voluptatem tempore esse."
                        },
                        new
                        {
                            Id = 8,
                            Adres = "Nielsplantsoen 7",
                            EMail = "porro",
                            GeboorteDatum = new DateTime(2025, 1, 29, 13, 55, 20, 231, DateTimeKind.Local).AddTicks(3238),
                            Naam = "Esse voluptatem provident cum autem nemo asperiores est atque id quis aliquam illum libero sed et tempore sint quis est."
                        },
                        new
                        {
                            Id = 9,
                            Adres = "Meijerstraat 71",
                            EMail = "fugit",
                            GeboorteDatum = new DateTime(2024, 9, 9, 3, 58, 54, 893, DateTimeKind.Local).AddTicks(283),
                            Naam = "Aliquam nihil qui soluta natus doloremque ex earum quia voluptatem ipsa accusamus ipsum tempore rerum eum ut qui aperiam maxime."
                        },
                        new
                        {
                            Id = 10,
                            Adres = "Stichtingmarkt 259a",
                            EMail = "qui",
                            GeboorteDatum = new DateTime(2024, 9, 2, 16, 26, 22, 340, DateTimeKind.Local).AddTicks(3075),
                            Naam = "Eveniet delectus ea dolores ea quae similique nesciunt quae voluptatem eos esse autem aperiam non occaecati repudiandae et eos quia."
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.Leerling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpleidingId")
                        .HasColumnType("int");

                    b.Property<int>("StudentenkaartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpleidingId");

                    b.HasIndex("StudentenkaartId")
                        .IsUnique();

                    b.ToTable("Leerling");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Adres = "Wallaan 900",
                            EMail = "sed",
                            GeboorteDatum = new DateTime(2024, 9, 13, 16, 1, 42, 454, DateTimeKind.Local).AddTicks(1678),
                            Naam = "Consequatur quas qui ut nostrum maxime dolorum sequi non eaque laudantium non perferendis aspernatur et nam a explicabo excepturi officia.",
                            OpleidingId = 11,
                            StudentenkaartId = 11
                        },
                        new
                        {
                            Id = 12,
                            Adres = "Boschplantsoen 9",
                            EMail = "consequatur",
                            GeboorteDatum = new DateTime(2024, 6, 26, 0, 33, 54, 249, DateTimeKind.Local).AddTicks(7799),
                            Naam = "Laborum non saepe consequatur qui accusamus quia optio hic facilis at modi reprehenderit facilis maxime error perspiciatis est magnam dicta.",
                            OpleidingId = 12,
                            StudentenkaartId = 12
                        },
                        new
                        {
                            Id = 13,
                            Adres = "Jesseplein 122",
                            EMail = "voluptas",
                            GeboorteDatum = new DateTime(2025, 1, 13, 8, 9, 8, 220, DateTimeKind.Local).AddTicks(9653),
                            Naam = "Et quo assumenda placeat fugit labore non nobis fuga dolores fuga beatae aut ut dolorum nemo aut id soluta omnis.",
                            OpleidingId = 13,
                            StudentenkaartId = 13
                        },
                        new
                        {
                            Id = 14,
                            Adres = "Lisaplein 202 I",
                            EMail = "odio",
                            GeboorteDatum = new DateTime(2024, 8, 4, 22, 49, 45, 853, DateTimeKind.Local).AddTicks(5398),
                            Naam = "Est quo cumque ut at modi autem vero et inventore aut voluptas impedit id et dolor esse eos culpa delectus.",
                            OpleidingId = 14,
                            StudentenkaartId = 14
                        },
                        new
                        {
                            Id = 15,
                            Adres = "Vengracht 888a",
                            EMail = "earum",
                            GeboorteDatum = new DateTime(2024, 9, 26, 18, 25, 48, 937, DateTimeKind.Local).AddTicks(7907),
                            Naam = "Nisi beatae exercitationem neque maiores pariatur optio quia soluta in sunt delectus qui harum corporis sint voluptas ducimus asperiores beatae.",
                            OpleidingId = 15,
                            StudentenkaartId = 15
                        },
                        new
                        {
                            Id = 16,
                            Adres = "Koksteeg 976 I",
                            EMail = "molestias",
                            GeboorteDatum = new DateTime(2025, 3, 12, 22, 41, 31, 446, DateTimeKind.Local).AddTicks(7422),
                            Naam = "Eum sed qui ut suscipit minus dolores provident cum unde aut architecto blanditiis rerum dicta rem aut similique architecto qui.",
                            OpleidingId = 16,
                            StudentenkaartId = 16
                        },
                        new
                        {
                            Id = 17,
                            Adres = "Amberkade 440 III",
                            EMail = "debitis",
                            GeboorteDatum = new DateTime(2024, 5, 27, 23, 0, 3, 997, DateTimeKind.Local).AddTicks(6598),
                            Naam = "Voluptates officiis voluptas voluptas accusamus a voluptate rerum voluptatum quis quasi quo expedita perspiciatis et quis quas itaque magni fuga.",
                            OpleidingId = 17,
                            StudentenkaartId = 17
                        },
                        new
                        {
                            Id = 18,
                            Adres = "Boschrijk 2",
                            EMail = "placeat",
                            GeboorteDatum = new DateTime(2025, 4, 1, 12, 26, 19, 248, DateTimeKind.Local).AddTicks(1313),
                            Naam = "Vel autem omnis consequatur iusto reprehenderit eos praesentium sit deleniti expedita neque veritatis ut voluptatem quia eum quis maiores voluptate.",
                            OpleidingId = 18,
                            StudentenkaartId = 18
                        },
                        new
                        {
                            Id = 19,
                            Adres = "Emmasloot 42",
                            EMail = "culpa",
                            GeboorteDatum = new DateTime(2025, 4, 11, 20, 6, 18, 290, DateTimeKind.Local).AddTicks(6046),
                            Naam = "Odio commodi eos dolorem a laboriosam dolorem aspernatur sint dolores mollitia qui inventore ea et eos alias repellat natus accusamus.",
                            OpleidingId = 19,
                            StudentenkaartId = 19
                        },
                        new
                        {
                            Id = 20,
                            Adres = "Witpassage 870 I",
                            EMail = "ut",
                            GeboorteDatum = new DateTime(2024, 6, 7, 18, 19, 47, 227, DateTimeKind.Local).AddTicks(5111),
                            Naam = "Accusamus impedit temporibus ipsa a debitis optio et et accusamus molestias possimus unde iusto ut et explicabo quae saepe nulla.",
                            OpleidingId = 20,
                            StudentenkaartId = 20
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.Opleiding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeschikbarePlaatsen")
                        .HasColumnType("int");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duur")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Opleiding");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            BeschikbarePlaatsen = 368,
                            Beschrijving = "Rerum ab odio eligendi est qui ut nesciunt dolorem hic iure et natus maiores repudiandae porro ullam pariatur qui earum.",
                            Duur = 3,
                            Naam = "Id optio in rerum unde qui dolore culpa esse aut ad sed esse voluptatem laborum voluptates commodi voluptatum esse ut."
                        },
                        new
                        {
                            Id = 12,
                            BeschikbarePlaatsen = 247,
                            Beschrijving = "Ipsam et tenetur magni consequatur temporibus ut architecto blanditiis culpa nemo iure nisi veritatis quaerat consequatur numquam quos sed fugiat.",
                            Duur = 4,
                            Naam = "Deleniti reprehenderit eos incidunt molestiae voluptatum fugit hic aut quisquam odio nulla cumque vitae dolorem velit labore vitae blanditiis cupiditate."
                        },
                        new
                        {
                            Id = 13,
                            BeschikbarePlaatsen = 272,
                            Beschrijving = "Nesciunt libero et itaque quasi saepe blanditiis pariatur nihil possimus vel nihil amet totam aut consequatur aut dolores totam et.",
                            Duur = 3,
                            Naam = "Dignissimos voluptatem voluptas numquam aut corporis est perferendis ut dolores officiis itaque et numquam minus rem aut saepe provident est."
                        },
                        new
                        {
                            Id = 14,
                            BeschikbarePlaatsen = 370,
                            Beschrijving = "Repellendus vel sunt nisi nemo voluptatem quod quam nesciunt vel soluta in eos sunt omnis cum in adipisci amet dolor.",
                            Duur = 4,
                            Naam = "Delectus natus eum facere aspernatur voluptates veritatis qui repudiandae quia minus dolor et ducimus sit harum impedit accusantium ex possimus."
                        },
                        new
                        {
                            Id = 15,
                            BeschikbarePlaatsen = 247,
                            Beschrijving = "Sint et vel assumenda quos voluptas aut minus nostrum et molestias qui repudiandae ut fugiat error omnis dolorum temporibus voluptates.",
                            Duur = 3,
                            Naam = "Itaque quidem nihil itaque quia ipsum similique impedit in quae sed vero impedit consequatur vel vel et exercitationem omnis expedita."
                        },
                        new
                        {
                            Id = 16,
                            BeschikbarePlaatsen = 324,
                            Beschrijving = "Nihil magnam cumque accusantium est ipsum quam tempora error expedita aliquid est odit voluptatum iste qui omnis et omnis dolore.",
                            Duur = 3,
                            Naam = "Aut placeat nihil magni aliquid soluta nisi repudiandae autem eius voluptatem enim iste enim omnis voluptatem est ut aut quae."
                        },
                        new
                        {
                            Id = 17,
                            BeschikbarePlaatsen = 395,
                            Beschrijving = "Explicabo voluptatem excepturi nisi rem quos necessitatibus laborum asperiores neque dicta consequuntur optio animi est facere natus maxime qui vitae.",
                            Duur = 3,
                            Naam = "Error quod asperiores rerum placeat tempore in omnis rerum ut temporibus sint id deleniti tempora totam voluptas magnam doloremque dolor."
                        },
                        new
                        {
                            Id = 18,
                            BeschikbarePlaatsen = 398,
                            Beschrijving = "Et quibusdam ea quibusdam rerum cum illum qui suscipit hic aperiam aut inventore atque repudiandae consequatur qui non earum delectus.",
                            Duur = 3,
                            Naam = "Officiis labore commodi et et cumque sit ad nihil similique quis eum ut dolore id exercitationem eos nostrum repudiandae sit."
                        },
                        new
                        {
                            Id = 19,
                            BeschikbarePlaatsen = 336,
                            Beschrijving = "Dolores quod corrupti ut non possimus quidem sequi reiciendis omnis nam cupiditate iure sint quis enim quidem et debitis voluptatem.",
                            Duur = 4,
                            Naam = "Voluptatum dolorem modi sed nobis consectetur quas officiis voluptas officiis fugiat reiciendis quos beatae et tenetur voluptatum distinctio nemo ab."
                        },
                        new
                        {
                            Id = 20,
                            BeschikbarePlaatsen = 372,
                            Beschrijving = "Cupiditate alias voluptas minima aut quidem rerum qui ut facilis velit aliquid iusto est deserunt totam laudantium et quas natus.",
                            Duur = 3,
                            Naam = "Assumenda est qui officia rem veritatis reiciendis consequatur est iusto illum repellat est deserunt debitis ratione cum voluptatem velit rerum."
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.StudentenKaart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Klas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentenKaart");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Klas = "a",
                            Naam = "Msc Davina Berg",
                            School = "Dekker, Vries and Brouwer"
                        },
                        new
                        {
                            Id = 12,
                            Klas = "excepturi",
                            Naam = "Fleur Bos Sr.",
                            School = "Boer, Jong and Wal"
                        },
                        new
                        {
                            Id = 13,
                            Klas = "iste",
                            Naam = "Bsc Jane Hendriks",
                            School = "Kok - Hendriks"
                        },
                        new
                        {
                            Id = 14,
                            Klas = "qui",
                            Naam = "Dhr. Jara Dijk",
                            School = "Dekker - Stichting"
                        },
                        new
                        {
                            Id = 15,
                            Klas = "expedita",
                            Naam = "Dion Jansen IV",
                            School = "Vos - Vos"
                        },
                        new
                        {
                            Id = 16,
                            Klas = "quam",
                            Naam = "Prof. Rico Dijk",
                            School = "Haan, Janssen and Jansen"
                        },
                        new
                        {
                            Id = 17,
                            Klas = "aut",
                            Naam = "Mevr. Dr. Neeltje Heuvel",
                            School = "Jong - Kok"
                        },
                        new
                        {
                            Id = 18,
                            Klas = "eveniet",
                            Naam = "Faas Hendriks Sr.",
                            School = "Klein, Bakker and Beek"
                        },
                        new
                        {
                            Id = 19,
                            Klas = "quos",
                            Naam = "Mevr. Dr. Siem Beek",
                            School = "Linden Bank"
                        },
                        new
                        {
                            Id = 20,
                            Klas = "praesentium",
                            Naam = "Marly Jong III",
                            School = "Groot - Visser"
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.Vak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AantalStudiePunten")
                        .HasColumnType("int");

                    b.Property<int>("LeerkrachtId")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Taal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Vaktype")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeerkrachtId");

                    b.ToTable("Vak");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            AantalStudiePunten = 21,
                            LeerkrachtId = 11,
                            Naam = "Mevr. Dr. Aylin Jansen",
                            Taal = "Grocery & Toys",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 12,
                            AantalStudiePunten = 30,
                            LeerkrachtId = 12,
                            Naam = "Kyara Linden II",
                            Taal = "Utah",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 13,
                            AantalStudiePunten = 21,
                            LeerkrachtId = 13,
                            Naam = "Mevr. Dr. Ninthe Bruin",
                            Taal = "forecast",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 14,
                            AantalStudiePunten = 25,
                            LeerkrachtId = 14,
                            Naam = "Oliwier Bosch Jr.",
                            Taal = "Refined",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 15,
                            AantalStudiePunten = 26,
                            LeerkrachtId = 15,
                            Naam = "Scottie Bos Jr.",
                            Taal = "invoice",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 16,
                            AantalStudiePunten = 36,
                            LeerkrachtId = 16,
                            Naam = "Dhr. Nikodem Jong",
                            Taal = "payment",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 17,
                            AantalStudiePunten = 48,
                            LeerkrachtId = 17,
                            Naam = "Romy Meijer Sr.",
                            Taal = "Aruban Guilder",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 18,
                            AantalStudiePunten = 41,
                            LeerkrachtId = 18,
                            Naam = "Prof. Dies Schouten",
                            Taal = "Mobility",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 19,
                            AantalStudiePunten = 42,
                            LeerkrachtId = 19,
                            Naam = "Christian Leeuwen IV",
                            Taal = "bypass",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 20,
                            AantalStudiePunten = 26,
                            LeerkrachtId = 20,
                            Naam = "Yves Leeuwen Jr.",
                            Taal = "Harbor",
                            Vaktype = 1
                        });
                });

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.HasOne("Simpleschool.Models.Opleiding", null)
                        .WithMany()
                        .HasForeignKey("OpleidingenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simpleschool.Models.Vak", null)
                        .WithMany()
                        .HasForeignKey("VakkenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Simpleschool.Models.Leerling", b =>
                {
                    b.HasOne("Simpleschool.Models.Opleiding", "Opleiding")
                        .WithMany("Leerlingen")
                        .HasForeignKey("OpleidingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simpleschool.Models.StudentenKaart", "Studentenkaart")
                        .WithOne("Leerling")
                        .HasForeignKey("Simpleschool.Models.Leerling", "StudentenkaartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opleiding");

                    b.Navigation("Studentenkaart");
                });

            modelBuilder.Entity("Simpleschool.Models.Vak", b =>
                {
                    b.HasOne("Simpleschool.Models.Leerkracht", "Leerkracht")
                        .WithMany("Vakken")
                        .HasForeignKey("LeerkrachtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leerkracht");
                });

            modelBuilder.Entity("Simpleschool.Models.Leerkracht", b =>
                {
                    b.Navigation("Vakken");
                });

            modelBuilder.Entity("Simpleschool.Models.Opleiding", b =>
                {
                    b.Navigation("Leerlingen");
                });

            modelBuilder.Entity("Simpleschool.Models.StudentenKaart", b =>
                {
                    b.Navigation("Leerling")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
