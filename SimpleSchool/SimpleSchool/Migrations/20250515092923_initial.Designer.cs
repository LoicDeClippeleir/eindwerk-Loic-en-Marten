// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleSchool.Data;

#nullable disable

namespace SimpleSchool.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250515092923_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.Property<int>("OpleidingenId")
                        .HasColumnType("int");

                    b.Property<int>("VakkenId")
                        .HasColumnType("int");

                    b.HasKey("OpleidingenId", "VakkenId");

                    b.HasIndex("VakkenId");

                    b.ToTable("Opleidingsvakken", (string)null);
                });

            modelBuilder.Entity("Simpleschool.Models.Leerkracht", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Leerkrachten");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Adres = "Roosplantsoen 700 III",
                            EMail = "debitis",
                            GeboorteDatum = new DateTime(2024, 10, 20, 18, 44, 33, 19, DateTimeKind.Local).AddTicks(6142),
                            Naam = "Aut esse molestiae sit sed quis iste ducimus perspiciatis quam aut dicta sed reiciendis explicabo libero mollitia odit molestiae explicabo."
                        },
                        new
                        {
                            Id = 12,
                            Adres = "Walmarkt 457 I",
                            EMail = "voluptas",
                            GeboorteDatum = new DateTime(2024, 8, 13, 18, 59, 13, 173, DateTimeKind.Local).AddTicks(9226),
                            Naam = "Et placeat aut magnam vero recusandae fugiat omnis quibusdam ullam deserunt nihil iusto repellendus quia assumenda dicta minima rerum atque."
                        },
                        new
                        {
                            Id = 13,
                            Adres = "Brouwerpassage 1",
                            EMail = "saepe",
                            GeboorteDatum = new DateTime(2024, 5, 18, 12, 21, 22, 457, DateTimeKind.Local).AddTicks(5481),
                            Naam = "Eligendi commodi eum ea est repellendus fugiat excepturi voluptatem quo reprehenderit alias maxime nam unde deserunt ab qui repudiandae odio."
                        },
                        new
                        {
                            Id = 14,
                            Adres = "Isastraat 248b",
                            EMail = "laboriosam",
                            GeboorteDatum = new DateTime(2024, 11, 13, 2, 32, 13, 622, DateTimeKind.Local).AddTicks(8386),
                            Naam = "Provident sequi molestiae aut fugiat explicabo consequatur porro dolor harum iste pariatur sunt ut id reprehenderit consequuntur ipsum eveniet ducimus."
                        },
                        new
                        {
                            Id = 15,
                            Adres = "Maaspassage 571",
                            EMail = "eligendi",
                            GeboorteDatum = new DateTime(2025, 4, 12, 4, 22, 29, 794, DateTimeKind.Local).AddTicks(3141),
                            Naam = "Ducimus libero necessitatibus voluptates aut id id molestias reiciendis sed non et dolor provident est odit maiores voluptatibus molestias quae."
                        },
                        new
                        {
                            Id = 16,
                            Adres = "Maudvelt 457",
                            EMail = "eos",
                            GeboorteDatum = new DateTime(2024, 8, 12, 12, 23, 1, 313, DateTimeKind.Local).AddTicks(9197),
                            Naam = "Consequuntur id quo neque laudantium et fugit accusamus illo quidem et rerum sed distinctio eligendi consequatur quisquam qui sunt molestiae."
                        },
                        new
                        {
                            Id = 17,
                            Adres = "Vlietdijk 195b",
                            EMail = "facere",
                            GeboorteDatum = new DateTime(2024, 8, 19, 8, 16, 5, 494, DateTimeKind.Local).AddTicks(47),
                            Naam = "Sed voluptas qui similique temporibus perferendis quos at quia consequatur qui quisquam perferendis neque et et natus autem qui soluta."
                        },
                        new
                        {
                            Id = 18,
                            Adres = "Isapassage 81",
                            EMail = "inventore",
                            GeboorteDatum = new DateTime(2024, 7, 19, 14, 50, 35, 548, DateTimeKind.Local).AddTicks(6009),
                            Naam = "Magnam dignissimos earum qui officiis quae expedita deleniti ullam dolor at veniam voluptas est voluptas ut reprehenderit suscipit voluptas quasi."
                        },
                        new
                        {
                            Id = 19,
                            Adres = "Jaydendijk 680 II",
                            EMail = "dolore",
                            GeboorteDatum = new DateTime(2024, 12, 8, 8, 15, 49, 789, DateTimeKind.Local).AddTicks(3800),
                            Naam = "In sed similique ea odit aut pariatur quisquam ea itaque voluptas totam quasi totam omnis architecto quia sint commodi molestiae."
                        },
                        new
                        {
                            Id = 20,
                            Adres = "Nickweg 514 III",
                            EMail = "veritatis",
                            GeboorteDatum = new DateTime(2024, 6, 25, 18, 24, 33, 211, DateTimeKind.Local).AddTicks(5205),
                            Naam = "Sint est quasi ut cupiditate non deleniti voluptas mollitia qui sit iure aspernatur quidem quisquam possimus in labore officia quia."
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.Leerling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpleidingId")
                        .HasColumnType("int");

                    b.Property<int>("StudentenkaartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpleidingId");

                    b.HasIndex("StudentenkaartId")
                        .IsUnique();

                    b.ToTable("Leerlingen");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Adres = "Vrieskade 035a",
                            EMail = "eligendi",
                            GeboorteDatum = new DateTime(2024, 5, 26, 18, 22, 34, 980, DateTimeKind.Local).AddTicks(7361),
                            Naam = "Et et autem sunt molestiae in omnis odio quia sed iste odio vel quibusdam natus aut iure inventore et et.",
                            OpleidingId = 11,
                            StudentenkaartId = 11
                        },
                        new
                        {
                            Id = 12,
                            Adres = "Brinkvelt 2",
                            EMail = "sapiente",
                            GeboorteDatum = new DateTime(2025, 2, 21, 12, 3, 19, 618, DateTimeKind.Local).AddTicks(9985),
                            Naam = "Et deserunt ipsam et ipsum eos labore vel voluptas possimus enim nostrum incidunt consequatur aliquam eum explicabo iste ex impedit.",
                            OpleidingId = 12,
                            StudentenkaartId = 12
                        },
                        new
                        {
                            Id = 13,
                            Adres = "Jongmarkt 225 I",
                            EMail = "ad",
                            GeboorteDatum = new DateTime(2024, 10, 8, 4, 0, 35, 92, DateTimeKind.Local).AddTicks(8827),
                            Naam = "Non reiciendis et numquam quaerat occaecati molestias provident quam impedit maxime aut a iure ad non voluptas vel animi suscipit.",
                            OpleidingId = 13,
                            StudentenkaartId = 13
                        },
                        new
                        {
                            Id = 14,
                            Adres = "Smithof 295b",
                            EMail = "autem",
                            GeboorteDatum = new DateTime(2024, 12, 2, 20, 40, 44, 801, DateTimeKind.Local).AddTicks(1010),
                            Naam = "Est enim maxime cum omnis qui facere unde architecto voluptatem numquam earum veritatis necessitatibus molestiae laudantium nulla illum expedita quae.",
                            OpleidingId = 14,
                            StudentenkaartId = 14
                        },
                        new
                        {
                            Id = 15,
                            Adres = "Boschsteeg 367 II",
                            EMail = "quos",
                            GeboorteDatum = new DateTime(2025, 3, 15, 5, 49, 34, 952, DateTimeKind.Local).AddTicks(2288),
                            Naam = "Minus voluptate veniam labore libero molestias alias perferendis adipisci deleniti ex qui eius doloremque consequatur praesentium nihil harum veniam quae.",
                            OpleidingId = 15,
                            StudentenkaartId = 15
                        },
                        new
                        {
                            Id = 16,
                            Adres = "Finnplantsoen 792a",
                            EMail = "quia",
                            GeboorteDatum = new DateTime(2024, 10, 26, 0, 42, 7, 228, DateTimeKind.Local).AddTicks(2116),
                            Naam = "Sequi dolor nam aut quia cum magni dolores esse eos maiores quisquam qui enim excepturi eos aspernatur dignissimos porro consequatur.",
                            OpleidingId = 16,
                            StudentenkaartId = 16
                        },
                        new
                        {
                            Id = 17,
                            Adres = "Rickpassage 57",
                            EMail = "reiciendis",
                            GeboorteDatum = new DateTime(2024, 6, 18, 14, 21, 57, 737, DateTimeKind.Local).AddTicks(8991),
                            Naam = "Vitae ut asperiores numquam et veritatis cumque soluta ut quidem sunt temporibus eveniet consectetur deleniti perspiciatis voluptatem facilis sint laboriosam.",
                            OpleidingId = 17,
                            StudentenkaartId = 17
                        },
                        new
                        {
                            Id = 18,
                            Adres = "Visserpark 756 II",
                            EMail = "ut",
                            GeboorteDatum = new DateTime(2025, 4, 2, 14, 8, 17, 571, DateTimeKind.Local).AddTicks(6689),
                            Naam = "Aut sunt eos itaque eos dolor sed enim quis sunt et accusantium debitis itaque recusandae optio qui corporis minima error.",
                            OpleidingId = 18,
                            StudentenkaartId = 18
                        },
                        new
                        {
                            Id = 19,
                            Adres = "Boskade 124 II",
                            EMail = "quisquam",
                            GeboorteDatum = new DateTime(2024, 6, 19, 4, 8, 36, 538, DateTimeKind.Local).AddTicks(3576),
                            Naam = "Dicta qui vitae et minus minima omnis consectetur non voluptatem rerum ullam ipsum delectus accusamus et ratione autem fugit voluptatem.",
                            OpleidingId = 19,
                            StudentenkaartId = 19
                        },
                        new
                        {
                            Id = 20,
                            Adres = "Thomasweg 007c",
                            EMail = "aut",
                            GeboorteDatum = new DateTime(2024, 9, 20, 6, 11, 58, 530, DateTimeKind.Local).AddTicks(5503),
                            Naam = "Cupiditate aliquid exercitationem totam deserunt nam beatae tempore velit et est et sunt pariatur nam ut ut et error voluptas.",
                            OpleidingId = 20,
                            StudentenkaartId = 20
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.Opleiding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeschikbarePlaatsen")
                        .HasColumnType("int");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duur")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Opleidingen");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            BeschikbarePlaatsen = 264,
                            Beschrijving = "Aut qui et voluptatem nulla dolores illo occaecati porro itaque ut ab iure cum soluta consequatur ut ratione qui aut.",
                            Duur = 3,
                            Naam = "In veritatis nostrum dolor molestias rerum facere consequatur provident autem consequatur laboriosam et enim harum fugiat ratione deserunt iusto dolorem."
                        },
                        new
                        {
                            Id = 12,
                            BeschikbarePlaatsen = 356,
                            Beschrijving = "Architecto sequi ut quisquam itaque sint provident sit dolorem placeat cupiditate dolore qui deserunt nobis dolorum iusto iusto facere vel.",
                            Duur = 3,
                            Naam = "Eaque saepe est id reprehenderit nemo quisquam deserunt ullam et aut deleniti est aperiam et maxime voluptates possimus doloribus cumque."
                        },
                        new
                        {
                            Id = 13,
                            BeschikbarePlaatsen = 365,
                            Beschrijving = "Provident architecto vel et magnam atque iure id quo eum pariatur magnam eos neque eos quidem dignissimos corrupti dolorem dolores.",
                            Duur = 3,
                            Naam = "Consequuntur architecto tempora sed nobis delectus eius voluptatibus quis harum autem a a magni maxime quis quisquam aliquam cumque dignissimos."
                        },
                        new
                        {
                            Id = 14,
                            BeschikbarePlaatsen = 260,
                            Beschrijving = "Adipisci officiis nostrum sed fuga provident repellat voluptatem eligendi numquam alias autem quas qui est quo fuga dolores tempora ea.",
                            Duur = 3,
                            Naam = "Quia ipsum consequatur expedita ea qui laboriosam quidem minima odit praesentium quo repellat ut ad fugiat autem ipsa rerum autem."
                        },
                        new
                        {
                            Id = 15,
                            BeschikbarePlaatsen = 396,
                            Beschrijving = "Repudiandae dolor incidunt neque veritatis veniam recusandae quidem omnis illo accusamus qui tenetur quos at rem eos neque non natus.",
                            Duur = 4,
                            Naam = "Aut eveniet cum tempora dolore omnis possimus et dicta sunt est voluptatem dolorem a suscipit iste tempora esse sit officia."
                        },
                        new
                        {
                            Id = 16,
                            BeschikbarePlaatsen = 392,
                            Beschrijving = "Voluptas ut et soluta qui laborum amet iste sed beatae at quo incidunt vero blanditiis itaque culpa ex natus est.",
                            Duur = 3,
                            Naam = "Culpa est enim modi error quis rerum dolores temporibus voluptatibus repellendus sapiente corrupti qui ea sint non sunt voluptatem saepe."
                        },
                        new
                        {
                            Id = 17,
                            BeschikbarePlaatsen = 204,
                            Beschrijving = "Sapiente porro molestiae natus sunt reprehenderit eaque consectetur repellat expedita quas unde id at sit cupiditate sit tempora architecto ducimus.",
                            Duur = 3,
                            Naam = "Autem consequatur velit aut est laboriosam accusamus mollitia et ut et ducimus quia architecto placeat incidunt ab nobis possimus minus."
                        },
                        new
                        {
                            Id = 18,
                            BeschikbarePlaatsen = 306,
                            Beschrijving = "Corporis voluptatibus autem saepe eaque in animi odit rerum non beatae qui commodi sint ipsa accusantium aperiam id aut in.",
                            Duur = 3,
                            Naam = "Laboriosam nihil dolor sapiente temporibus et saepe cumque numquam architecto illum voluptatibus ad libero corporis debitis autem ad placeat magni."
                        },
                        new
                        {
                            Id = 19,
                            BeschikbarePlaatsen = 268,
                            Beschrijving = "Quasi eos at occaecati ex fuga commodi consequatur officiis vel distinctio voluptas est eaque inventore recusandae amet exercitationem est impedit.",
                            Duur = 3,
                            Naam = "Accusantium incidunt omnis fugit similique magni adipisci et voluptatum deserunt dolorem facilis occaecati optio quas veniam modi et voluptas asperiores."
                        },
                        new
                        {
                            Id = 20,
                            BeschikbarePlaatsen = 358,
                            Beschrijving = "Accusamus ad minus aut consequatur sapiente id aut dolore rerum magnam sit enim modi minus ipsa explicabo dolores incidunt corrupti.",
                            Duur = 4,
                            Naam = "Voluptatem aut accusantium error et minus assumenda perspiciatis corrupti aut quis nostrum consectetur aut molestiae aut excepturi fuga velit autem."
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.StudentenKaart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Klas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentenKaarten");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Klas = "ut",
                            Naam = "Bsc Florine Bakker",
                            School = "Smit, Jansen and Peters"
                        },
                        new
                        {
                            Id = 12,
                            Klas = "dolores",
                            Naam = "Prof. Nour Dijkstra",
                            School = "Meijer - Bakker"
                        },
                        new
                        {
                            Id = 13,
                            Klas = "modi",
                            Naam = "Msc Thijmen Bos",
                            School = "Dijkstra - Groot"
                        },
                        new
                        {
                            Id = 14,
                            Klas = "vero",
                            Naam = "Msc Youp Haan",
                            School = "Bosch - Groot"
                        },
                        new
                        {
                            Id = 15,
                            Klas = "inventore",
                            Naam = "Tymon Bruin III",
                            School = "Dijkstra - Beek"
                        },
                        new
                        {
                            Id = 16,
                            Klas = "nesciunt",
                            Naam = "Dhr. Aaron Groot",
                            School = "Maas - Brink"
                        },
                        new
                        {
                            Id = 17,
                            Klas = "repellat",
                            Naam = "Luciano Klein III",
                            School = "Vermeulen, Wit and Haan"
                        },
                        new
                        {
                            Id = 18,
                            Klas = "dolore",
                            Naam = "Mevr. Dr. Bart Koning",
                            School = "Brink - Smits"
                        },
                        new
                        {
                            Id = 19,
                            Klas = "corrupti",
                            Naam = "Bsc Nena Dijkstra",
                            School = "Haan, Leeuwen and Dijk"
                        },
                        new
                        {
                            Id = 20,
                            Klas = "velit",
                            Naam = "Cornelia Meer Jr.",
                            School = "Willems NV"
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.Vak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AantalStudiePunten")
                        .HasColumnType("int");

                    b.Property<int>("LeerkrachtId")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Taal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Vaktype")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeerkrachtId");

                    b.ToTable("Vakken");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            AantalStudiePunten = 30,
                            LeerkrachtId = 0,
                            Naam = "Maes Ven I",
                            Taal = "synergy",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 12,
                            AantalStudiePunten = 41,
                            LeerkrachtId = 0,
                            Naam = "Selina Haan II",
                            Taal = "connecting",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 13,
                            AantalStudiePunten = 38,
                            LeerkrachtId = 0,
                            Naam = "Fieke Brink Jr.",
                            Taal = "Faroe Islands",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 14,
                            AantalStudiePunten = 41,
                            LeerkrachtId = 0,
                            Naam = "Mevr. Dr. Juna Stichting",
                            Taal = "Bedfordshire",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 15,
                            AantalStudiePunten = 35,
                            LeerkrachtId = 0,
                            Naam = "Jada Dekker Sr.",
                            Taal = "Locks",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 16,
                            AantalStudiePunten = 27,
                            LeerkrachtId = 0,
                            Naam = "Bsc Ryan Stichting",
                            Taal = "productivity",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 17,
                            AantalStudiePunten = 28,
                            LeerkrachtId = 0,
                            Naam = "Brian Dijkstra III",
                            Taal = "haptic",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 18,
                            AantalStudiePunten = 25,
                            LeerkrachtId = 0,
                            Naam = "Prof. Sem Wal",
                            Taal = "convergence",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 19,
                            AantalStudiePunten = 33,
                            LeerkrachtId = 0,
                            Naam = "Manuel Groot Jr.",
                            Taal = "Internal",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 20,
                            AantalStudiePunten = 25,
                            LeerkrachtId = 0,
                            Naam = "Imani Smits V",
                            Taal = "Avon",
                            Vaktype = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.HasOne("Simpleschool.Models.Opleiding", null)
                        .WithMany()
                        .HasForeignKey("OpleidingenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simpleschool.Models.Vak", null)
                        .WithMany()
                        .HasForeignKey("VakkenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Simpleschool.Models.Leerling", b =>
                {
                    b.HasOne("Simpleschool.Models.Opleiding", "Opleiding")
                        .WithMany("Leerlingen")
                        .HasForeignKey("OpleidingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simpleschool.Models.StudentenKaart", "Studentenkaart")
                        .WithOne("Leerling")
                        .HasForeignKey("Simpleschool.Models.Leerling", "StudentenkaartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opleiding");

                    b.Navigation("Studentenkaart");
                });

            modelBuilder.Entity("Simpleschool.Models.Vak", b =>
                {
                    b.HasOne("Simpleschool.Models.Leerkracht", "Leerkracht")
                        .WithMany("Vakken")
                        .HasForeignKey("LeerkrachtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leerkracht");
                });

            modelBuilder.Entity("Simpleschool.Models.Leerkracht", b =>
                {
                    b.Navigation("Vakken");
                });

            modelBuilder.Entity("Simpleschool.Models.Opleiding", b =>
                {
                    b.Navigation("Leerlingen");
                });

            modelBuilder.Entity("Simpleschool.Models.StudentenKaart", b =>
                {
                    b.Navigation("Leerling")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
