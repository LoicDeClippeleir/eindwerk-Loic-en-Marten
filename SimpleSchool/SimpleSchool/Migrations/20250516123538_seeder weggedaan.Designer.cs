// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleSchool.Data;

#nullable disable

namespace SimpleSchool.Migrations
{
    [DbContext(typeof(SimpleSchoolContext))]
    [Migration("20250516123538_seeder weggedaan")]
    partial class seederweggedaan
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.Property<int>("OpleidingenId")
                        .HasColumnType("int");

                    b.Property<int>("VakkenId")
                        .HasColumnType("int");

                    b.HasKey("OpleidingenId", "VakkenId");

                    b.HasIndex("VakkenId");

                    b.ToTable("Opleidingsvakken", (string)null);
                });

            modelBuilder.Entity("Simpleschool.Models.Leerkracht", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Leerkracht");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adres = "Smitsdijk 367a",
                            EMail = "accusamus",
                            GeboorteDatum = new DateTime(2025, 1, 11, 7, 24, 40, 600, DateTimeKind.Local).AddTicks(3958),
                            Naam = "Animi aspernatur veritatis minus eius voluptas ullam laborum praesentium saepe non facilis molestiae tenetur est deserunt non debitis assumenda occaecati."
                        },
                        new
                        {
                            Id = 2,
                            Adres = "Brouwerhof 5",
                            EMail = "voluptas",
                            GeboorteDatum = new DateTime(2025, 5, 5, 19, 49, 26, 81, DateTimeKind.Local).AddTicks(9745),
                            Naam = "Necessitatibus necessitatibus porro ut velit ipsum facere et hic et natus et aut libero voluptatem labore aut aperiam dolores tempora."
                        },
                        new
                        {
                            Id = 3,
                            Adres = "Anoukhof 164a",
                            EMail = "dicta",
                            GeboorteDatum = new DateTime(2024, 12, 25, 10, 5, 50, 1, DateTimeKind.Local).AddTicks(6502),
                            Naam = "Nobis occaecati eaque numquam ut illo aut autem et ut totam qui qui excepturi dolorem aspernatur commodi repellat amet laboriosam."
                        },
                        new
                        {
                            Id = 4,
                            Adres = "Annakade 585a",
                            EMail = "id",
                            GeboorteDatum = new DateTime(2024, 10, 20, 1, 34, 22, 248, DateTimeKind.Local).AddTicks(2091),
                            Naam = "Labore harum et libero earum impedit culpa eum dignissimos quia in ut pariatur ut officiis tempora enim velit et et."
                        },
                        new
                        {
                            Id = 5,
                            Adres = "Jonghof 693 III",
                            EMail = "et",
                            GeboorteDatum = new DateTime(2024, 6, 13, 17, 33, 38, 832, DateTimeKind.Local).AddTicks(8783),
                            Naam = "Nobis minima qui fuga et nostrum adipisci quod quia ut eius sunt eum quibusdam quam pariatur consequatur dicta molestias iure."
                        },
                        new
                        {
                            Id = 6,
                            Adres = "Kostersloot 98",
                            EMail = "eos",
                            GeboorteDatum = new DateTime(2024, 6, 29, 13, 13, 23, 217, DateTimeKind.Local).AddTicks(8792),
                            Naam = "Nemo ex et ut molestias eos quia asperiores et voluptate ipsum rerum doloribus assumenda sed eaque suscipit aut quisquam maiores."
                        },
                        new
                        {
                            Id = 7,
                            Adres = "Juliavelt 127c",
                            EMail = "ullam",
                            GeboorteDatum = new DateTime(2025, 1, 13, 15, 36, 29, 463, DateTimeKind.Local).AddTicks(8045),
                            Naam = "Quis necessitatibus vero delectus et voluptas rerum et molestias alias voluptates autem accusantium quos distinctio voluptatibus repellendus iusto nisi inventore."
                        },
                        new
                        {
                            Id = 8,
                            Adres = "Jansenhof 505a",
                            EMail = "ducimus",
                            GeboorteDatum = new DateTime(2024, 9, 13, 22, 43, 5, 385, DateTimeKind.Local).AddTicks(7691),
                            Naam = "Vero ad quia est consequatur omnis incidunt modi blanditiis et et eos distinctio eum omnis dolores veniam adipisci soluta possimus."
                        },
                        new
                        {
                            Id = 9,
                            Adres = "Janssenplein 46",
                            EMail = "id",
                            GeboorteDatum = new DateTime(2025, 2, 26, 12, 12, 48, 529, DateTimeKind.Local).AddTicks(3847),
                            Naam = "Error neque illo velit quo ipsam rerum aut explicabo natus dignissimos maxime non laboriosam hic ratione ut rem est ut."
                        },
                        new
                        {
                            Id = 10,
                            Adres = "Vensloot 008a",
                            EMail = "quia",
                            GeboorteDatum = new DateTime(2024, 10, 31, 0, 14, 39, 197, DateTimeKind.Local).AddTicks(531),
                            Naam = "Incidunt ut autem voluptas libero amet quod modi ut non quis totam quo ea consequatur labore delectus illo et ut."
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.Leerling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpleidingId")
                        .HasColumnType("int");

                    b.Property<int>("StudentenkaartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpleidingId");

                    b.HasIndex("StudentenkaartId")
                        .IsUnique();

                    b.ToTable("Leerling");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Adres = "Rubenweg 065 I",
                            EMail = "libero",
                            GeboorteDatum = new DateTime(2025, 5, 15, 22, 57, 40, 778, DateTimeKind.Local).AddTicks(5671),
                            Naam = "Molestiae facere aut ut quidem eligendi ratione qui eum consequatur qui et in at ducimus numquam cupiditate quas illum consequatur.",
                            OpleidingId = 11,
                            StudentenkaartId = 11
                        },
                        new
                        {
                            Id = 12,
                            Adres = "Tomplantsoen 206c",
                            EMail = "reiciendis",
                            GeboorteDatum = new DateTime(2024, 7, 18, 2, 46, 26, 854, DateTimeKind.Local).AddTicks(4981),
                            Naam = "Est quia a excepturi molestiae neque occaecati in ea nesciunt et nihil eos ut sint et voluptas atque doloribus amet.",
                            OpleidingId = 12,
                            StudentenkaartId = 12
                        },
                        new
                        {
                            Id = 13,
                            Adres = "Evavelt 439 III",
                            EMail = "temporibus",
                            GeboorteDatum = new DateTime(2024, 7, 15, 5, 41, 47, 259, DateTimeKind.Local).AddTicks(5686),
                            Naam = "Praesentium sint enim facilis ipsum consectetur quos fugiat dolor hic qui est nobis delectus rerum id id eius consequatur quaerat.",
                            OpleidingId = 13,
                            StudentenkaartId = 13
                        },
                        new
                        {
                            Id = 14,
                            Adres = "Maxplantsoen 498a",
                            EMail = "quam",
                            GeboorteDatum = new DateTime(2024, 7, 13, 2, 46, 20, 429, DateTimeKind.Local).AddTicks(2091),
                            Naam = "Officiis sed quae cum expedita accusantium in non perspiciatis dicta dolorem dolorum repellat quisquam quis et tempore dolores ut dignissimos.",
                            OpleidingId = 14,
                            StudentenkaartId = 14
                        },
                        new
                        {
                            Id = 15,
                            Adres = "Smitplein 64",
                            EMail = "quia",
                            GeboorteDatum = new DateTime(2025, 4, 2, 6, 18, 42, 590, DateTimeKind.Local).AddTicks(6821),
                            Naam = "Autem beatae aliquid tenetur veniam ipsum maiores labore debitis provident sit aut id ipsum voluptatem optio vero corrupti voluptates repudiandae.",
                            OpleidingId = 15,
                            StudentenkaartId = 15
                        },
                        new
                        {
                            Id = 16,
                            Adres = "Veenplein 487 III",
                            EMail = "doloremque",
                            GeboorteDatum = new DateTime(2025, 3, 28, 16, 12, 32, 358, DateTimeKind.Local).AddTicks(7439),
                            Naam = "Pariatur officiis inventore rem eum voluptate ducimus aperiam voluptas hic explicabo qui est dignissimos pariatur ullam adipisci vero esse similique.",
                            OpleidingId = 16,
                            StudentenkaartId = 16
                        },
                        new
                        {
                            Id = 17,
                            Adres = "Bruinpassage 1",
                            EMail = "accusamus",
                            GeboorteDatum = new DateTime(2024, 7, 30, 16, 16, 49, 435, DateTimeKind.Local).AddTicks(6638),
                            Naam = "Quis nobis qui maxime molestiae dicta ea reprehenderit ab molestias voluptates quidem voluptatem nemo unde expedita debitis sed quia tenetur.",
                            OpleidingId = 17,
                            StudentenkaartId = 17
                        },
                        new
                        {
                            Id = 18,
                            Adres = "Heuvelpassage 38",
                            EMail = "impedit",
                            GeboorteDatum = new DateTime(2024, 7, 8, 2, 39, 31, 410, DateTimeKind.Local).AddTicks(8171),
                            Naam = "Tempora nemo doloremque explicabo eius sequi fugit nesciunt vel vel blanditiis maxime suscipit voluptatum neque quo voluptatem explicabo et repudiandae.",
                            OpleidingId = 18,
                            StudentenkaartId = 18
                        },
                        new
                        {
                            Id = 19,
                            Adres = "Rickplein 888 II",
                            EMail = "dolores",
                            GeboorteDatum = new DateTime(2025, 1, 22, 16, 26, 17, 828, DateTimeKind.Local).AddTicks(4201),
                            Naam = "Doloremque eum et ut quas et magni omnis repellat eius voluptatem fugit quia error sed eligendi modi natus quam ratione.",
                            OpleidingId = 19,
                            StudentenkaartId = 19
                        },
                        new
                        {
                            Id = 20,
                            Adres = "Bruinhof 034",
                            EMail = "ex",
                            GeboorteDatum = new DateTime(2024, 11, 6, 10, 10, 54, 229, DateTimeKind.Local).AddTicks(9360),
                            Naam = "Dignissimos voluptatum neque non quibusdam voluptatem nostrum consectetur aliquid aut ut consequuntur esse aut autem veritatis iste ratione inventore voluptas.",
                            OpleidingId = 20,
                            StudentenkaartId = 20
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.Opleiding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeschikbarePlaatsen")
                        .HasColumnType("int");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duur")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Opleiding");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            BeschikbarePlaatsen = 219,
                            Beschrijving = "Et qui nihil sed incidunt quia ipsum est distinctio alias ab fuga sed sit voluptas doloribus et eius tempora blanditiis.",
                            Duur = 4,
                            Naam = "Facere ut facere fuga id accusamus est libero ducimus dignissimos vitae pariatur asperiores ducimus est laudantium nihil iusto sunt quia."
                        },
                        new
                        {
                            Id = 12,
                            BeschikbarePlaatsen = 220,
                            Beschrijving = "Facere voluptas impedit quis nemo nihil voluptates in et magni nihil dolore et cum blanditiis eum fugiat et harum et.",
                            Duur = 3,
                            Naam = "Quasi deleniti neque et ducimus cum eligendi officia quam ut aut et dolores odit nemo pariatur officia quod officia quis."
                        },
                        new
                        {
                            Id = 13,
                            BeschikbarePlaatsen = 327,
                            Beschrijving = "Reprehenderit voluptatibus voluptatem ipsum blanditiis quisquam reiciendis placeat dolor quo est ullam temporibus debitis suscipit autem dolorem vel cumque ab.",
                            Duur = 3,
                            Naam = "Quisquam accusamus ut quia assumenda error recusandae error tempore laboriosam porro maxime deserunt et vitae ut sit molestias aut voluptatem."
                        },
                        new
                        {
                            Id = 14,
                            BeschikbarePlaatsen = 281,
                            Beschrijving = "Animi laudantium qui autem veritatis dolor ut ut excepturi magni aut quae autem exercitationem sunt ex quia fugit quo deleniti.",
                            Duur = 3,
                            Naam = "Omnis voluptates vel harum impedit aut quae voluptatibus consequatur ut quia ipsa libero ut repudiandae odit commodi error sint quam."
                        },
                        new
                        {
                            Id = 15,
                            BeschikbarePlaatsen = 269,
                            Beschrijving = "Quisquam reiciendis temporibus animi magni quis ut voluptas odio maiores accusamus qui accusamus quis quia a ab quos voluptatum voluptates.",
                            Duur = 4,
                            Naam = "Eaque sit eos soluta cum eos magnam molestias est vitae praesentium vero voluptas cupiditate nihil voluptas cupiditate voluptas culpa expedita."
                        },
                        new
                        {
                            Id = 16,
                            BeschikbarePlaatsen = 305,
                            Beschrijving = "Nemo atque est accusantium et quasi alias deserunt harum et cupiditate quidem consectetur quibusdam hic omnis repellat quia aut exercitationem.",
                            Duur = 3,
                            Naam = "At debitis laudantium laborum vitae porro voluptatem nobis aut adipisci rerum distinctio velit eos tempora temporibus omnis iste voluptates sunt."
                        },
                        new
                        {
                            Id = 17,
                            BeschikbarePlaatsen = 330,
                            Beschrijving = "Modi non animi qui facere hic quam iste provident officiis consectetur inventore porro est voluptatum minus consectetur ad delectus animi.",
                            Duur = 4,
                            Naam = "Qui commodi ut ratione debitis rerum molestiae amet ea temporibus praesentium corporis architecto quam nihil hic aliquid quaerat blanditiis porro."
                        },
                        new
                        {
                            Id = 18,
                            BeschikbarePlaatsen = 388,
                            Beschrijving = "Sunt est velit rerum beatae totam illum eaque esse ipsum adipisci corrupti debitis aperiam voluptas voluptas debitis nam adipisci officia.",
                            Duur = 3,
                            Naam = "Eaque et atque temporibus repellendus doloribus assumenda eius tempora deleniti voluptatem ut deserunt ducimus tempore odit omnis eum et reiciendis."
                        },
                        new
                        {
                            Id = 19,
                            BeschikbarePlaatsen = 327,
                            Beschrijving = "Porro cum iste aut dicta ex asperiores accusamus deserunt possimus nostrum aut culpa eos placeat ut explicabo distinctio et optio.",
                            Duur = 3,
                            Naam = "Blanditiis aperiam dignissimos nostrum quis totam quis porro voluptate illo ab minus dignissimos aut nam nulla sed libero voluptatum ut."
                        },
                        new
                        {
                            Id = 20,
                            BeschikbarePlaatsen = 318,
                            Beschrijving = "Deserunt et voluptatem consequatur et porro itaque a assumenda quia totam eum non numquam qui ut eos dolore eum est.",
                            Duur = 4,
                            Naam = "Dolorum nihil ullam cupiditate quibusdam dolor voluptatem est magnam saepe totam voluptas ducimus rerum voluptas repudiandae vel eum itaque sit."
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.StudentenKaart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Klas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentenKaart");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Klas = "ullam",
                            Naam = "Elin Veen V",
                            School = "Berg - Boer"
                        },
                        new
                        {
                            Id = 12,
                            Klas = "dolores",
                            Naam = "Bsc Juda Stichting",
                            School = "Jong, Brink and Bakker"
                        },
                        new
                        {
                            Id = 13,
                            Klas = "voluptatum",
                            Naam = "Prof. Mara Boer",
                            School = "Ven - Hoek"
                        },
                        new
                        {
                            Id = 14,
                            Klas = "veritatis",
                            Naam = "Chloe Vliet Jr.",
                            School = "Groot International"
                        },
                        new
                        {
                            Id = 15,
                            Klas = "minus",
                            Naam = "Nino Schouten II",
                            School = "Dekker - Jacobs"
                        },
                        new
                        {
                            Id = 16,
                            Klas = "doloremque",
                            Naam = "Senna Bos II",
                            School = "Brink IT"
                        },
                        new
                        {
                            Id = 17,
                            Klas = "perspiciatis",
                            Naam = "Josefien Wit II",
                            School = "Meer - Janssen"
                        },
                        new
                        {
                            Id = 18,
                            Klas = "maiores",
                            Naam = "Arthur Brouwer IV",
                            School = "Brink - Peters"
                        },
                        new
                        {
                            Id = 19,
                            Klas = "vero",
                            Naam = "Prof. Moos Linden",
                            School = "Berg - Bos"
                        },
                        new
                        {
                            Id = 20,
                            Klas = "velit",
                            Naam = "Msc Jesper Dijkstra",
                            School = "Jacobs BV"
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.Vak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AantalStudiePunten")
                        .HasColumnType("int");

                    b.Property<int>("LeerkrachtId")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Taal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Vaktype")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeerkrachtId");

                    b.ToTable("Vak");
                });

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.HasOne("Simpleschool.Models.Opleiding", null)
                        .WithMany()
                        .HasForeignKey("OpleidingenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simpleschool.Models.Vak", null)
                        .WithMany()
                        .HasForeignKey("VakkenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Simpleschool.Models.Leerling", b =>
                {
                    b.HasOne("Simpleschool.Models.Opleiding", "Opleiding")
                        .WithMany("Leerlingen")
                        .HasForeignKey("OpleidingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simpleschool.Models.StudentenKaart", "Studentenkaart")
                        .WithOne("Leerling")
                        .HasForeignKey("Simpleschool.Models.Leerling", "StudentenkaartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opleiding");

                    b.Navigation("Studentenkaart");
                });

            modelBuilder.Entity("Simpleschool.Models.Vak", b =>
                {
                    b.HasOne("Simpleschool.Models.Leerkracht", "Leerkracht")
                        .WithMany("Vakken")
                        .HasForeignKey("LeerkrachtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leerkracht");
                });

            modelBuilder.Entity("Simpleschool.Models.Leerkracht", b =>
                {
                    b.Navigation("Vakken");
                });

            modelBuilder.Entity("Simpleschool.Models.Opleiding", b =>
                {
                    b.Navigation("Leerlingen");
                });

            modelBuilder.Entity("Simpleschool.Models.StudentenKaart", b =>
                {
                    b.Navigation("Leerling")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
