// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleSchool.Data;

#nullable disable

namespace SimpleSchool.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250515093518_roleseeder removed")]
    partial class roleseederremoved
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.Property<int>("OpleidingenId")
                        .HasColumnType("int");

                    b.Property<int>("VakkenId")
                        .HasColumnType("int");

                    b.HasKey("OpleidingenId", "VakkenId");

                    b.HasIndex("VakkenId");

                    b.ToTable("Opleidingsvakken", (string)null);
                });

            modelBuilder.Entity("Simpleschool.Models.Leerkracht", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Leerkrachten");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Adres = "Damplein 281c",
                            EMail = "dolorum",
                            GeboorteDatum = new DateTime(2025, 1, 23, 2, 29, 3, 358, DateTimeKind.Local).AddTicks(7090),
                            Naam = "Atque consequuntur rerum minima explicabo ipsam delectus qui voluptate ipsa modi vero ratione asperiores temporibus enim enim qui tenetur iusto."
                        },
                        new
                        {
                            Id = 12,
                            Adres = "Haanstraat 865",
                            EMail = "possimus",
                            GeboorteDatum = new DateTime(2024, 5, 23, 3, 33, 28, 520, DateTimeKind.Local).AddTicks(7190),
                            Naam = "Fugit quam totam a in eius cum hic ut sequi aut voluptatem facere consequatur qui est est dolorem et molestiae."
                        },
                        new
                        {
                            Id = 13,
                            Adres = "Thijsmarkt 963a",
                            EMail = "facilis",
                            GeboorteDatum = new DateTime(2025, 3, 20, 5, 6, 31, 182, DateTimeKind.Local).AddTicks(6638),
                            Naam = "Est fuga qui debitis totam perspiciatis explicabo harum atque molestiae consequatur impedit doloribus ex a magnam facere dolores sed dolores."
                        },
                        new
                        {
                            Id = 14,
                            Adres = "Peterslaan 779 II",
                            EMail = "et",
                            GeboorteDatum = new DateTime(2024, 12, 2, 7, 48, 31, 856, DateTimeKind.Local).AddTicks(4706),
                            Naam = "Sint quasi molestias dolore ex quidem quia qui ipsum quibusdam ad natus nemo et modi qui dolorum ullam et voluptate."
                        },
                        new
                        {
                            Id = 15,
                            Adres = "Willemsplein 072c",
                            EMail = "ratione",
                            GeboorteDatum = new DateTime(2025, 2, 1, 10, 12, 14, 984, DateTimeKind.Local).AddTicks(5975),
                            Naam = "Voluptas voluptatum labore quod autem ut mollitia et cum error aut sit illo ut sit et voluptatum autem iusto quis."
                        },
                        new
                        {
                            Id = 16,
                            Adres = "Maudstraat 67",
                            EMail = "omnis",
                            GeboorteDatum = new DateTime(2025, 2, 4, 20, 32, 28, 764, DateTimeKind.Local).AddTicks(3486),
                            Naam = "Pariatur qui quasi rerum harum exercitationem rerum quibusdam deserunt qui cumque sed in corporis necessitatibus tempora saepe fuga hic necessitatibus."
                        },
                        new
                        {
                            Id = 17,
                            Adres = "Thomasvelt 61",
                            EMail = "voluptas",
                            GeboorteDatum = new DateTime(2024, 11, 30, 0, 6, 39, 702, DateTimeKind.Local).AddTicks(5617),
                            Naam = "Beatae animi enim omnis velit voluptate tenetur animi occaecati quos quasi sint id architecto eos commodi quo veniam sequi error."
                        },
                        new
                        {
                            Id = 18,
                            Adres = "Brittpark 906 I",
                            EMail = "est",
                            GeboorteDatum = new DateTime(2024, 12, 16, 4, 9, 46, 856, DateTimeKind.Local).AddTicks(3329),
                            Naam = "Quam qui ullam rerum deleniti nostrum et aut dolores exercitationem ut dolorum eius veritatis maiores at nostrum sapiente exercitationem assumenda."
                        },
                        new
                        {
                            Id = 19,
                            Adres = "Janvelt 670a",
                            EMail = "quasi",
                            GeboorteDatum = new DateTime(2024, 6, 17, 21, 27, 47, 737, DateTimeKind.Local).AddTicks(1441),
                            Naam = "Mollitia quae assumenda ut reiciendis error voluptatem facilis dolorem quidem aut accusantium aut rerum rerum quia dignissimos rerum ab ad."
                        },
                        new
                        {
                            Id = 20,
                            Adres = "Milanweg 320c",
                            EMail = "facilis",
                            GeboorteDatum = new DateTime(2024, 7, 18, 2, 14, 44, 677, DateTimeKind.Local).AddTicks(7344),
                            Naam = "Quo aut maxime itaque ab velit ea rem quisquam occaecati saepe in nemo itaque eum laudantium illum cumque ut animi."
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.Leerling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpleidingId")
                        .HasColumnType("int");

                    b.Property<int>("StudentenkaartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpleidingId");

                    b.HasIndex("StudentenkaartId")
                        .IsUnique();

                    b.ToTable("Leerlingen");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Adres = "Janssenlaan 086 I",
                            EMail = "ut",
                            GeboorteDatum = new DateTime(2024, 7, 28, 15, 28, 25, 929, DateTimeKind.Local).AddTicks(1309),
                            Naam = "Quisquam ad cumque corrupti dignissimos ratione maxime qui quo minus ut rerum non et sit minima minima autem ratione quas.",
                            OpleidingId = 11,
                            StudentenkaartId = 11
                        },
                        new
                        {
                            Id = 12,
                            Adres = "Boerpark 724 III",
                            EMail = "nihil",
                            GeboorteDatum = new DateTime(2024, 8, 13, 16, 7, 25, 477, DateTimeKind.Local).AddTicks(695),
                            Naam = "Ea laudantium id nihil molestias soluta magnam id et fugit voluptatem sint sequi et ut consequuntur quae vitae quisquam aut.",
                            OpleidingId = 12,
                            StudentenkaartId = 12
                        },
                        new
                        {
                            Id = 13,
                            Adres = "Maudplein 990 I",
                            EMail = "corporis",
                            GeboorteDatum = new DateTime(2025, 1, 16, 8, 3, 1, 667, DateTimeKind.Local).AddTicks(7508),
                            Naam = "Iure quis ea voluptas et ex velit dolorem aliquam sunt consequuntur dignissimos quia rerum atque sit esse reprehenderit culpa ut.",
                            OpleidingId = 13,
                            StudentenkaartId = 13
                        },
                        new
                        {
                            Id = 14,
                            Adres = "Meerdijk 758a",
                            EMail = "eligendi",
                            GeboorteDatum = new DateTime(2025, 3, 11, 13, 28, 22, 278, DateTimeKind.Local).AddTicks(4373),
                            Naam = "Quia est illum distinctio quibusdam fugit ducimus sunt ex fugit dolorem rerum magni consequatur ea et sint neque aut facilis.",
                            OpleidingId = 14,
                            StudentenkaartId = 14
                        },
                        new
                        {
                            Id = 15,
                            Adres = "Johannesgracht 757 I",
                            EMail = "labore",
                            GeboorteDatum = new DateTime(2025, 1, 6, 8, 26, 1, 795, DateTimeKind.Local).AddTicks(3122),
                            Naam = "Molestias sed debitis vel ex repudiandae nobis atque est veniam qui sequi nostrum eos accusamus repudiandae optio asperiores rerum nihil.",
                            OpleidingId = 15,
                            StudentenkaartId = 15
                        },
                        new
                        {
                            Id = 16,
                            Adres = "Liekeweg 147b",
                            EMail = "nisi",
                            GeboorteDatum = new DateTime(2024, 12, 18, 23, 17, 25, 658, DateTimeKind.Local).AddTicks(7819),
                            Naam = "Tempora incidunt repellendus sunt culpa totam illum esse vitae ut eos necessitatibus consequuntur fugit qui temporibus molestiae quod temporibus quo.",
                            OpleidingId = 16,
                            StudentenkaartId = 16
                        },
                        new
                        {
                            Id = 17,
                            Adres = "Boschstraat 492",
                            EMail = "repudiandae",
                            GeboorteDatum = new DateTime(2025, 1, 25, 18, 21, 24, 440, DateTimeKind.Local).AddTicks(1285),
                            Naam = "Culpa eligendi vero placeat in est sapiente eveniet doloremque itaque nihil pariatur beatae repellat illo harum eum excepturi autem nihil.",
                            OpleidingId = 17,
                            StudentenkaartId = 17
                        },
                        new
                        {
                            Id = 18,
                            Adres = "Jessedijk 861 III",
                            EMail = "rerum",
                            GeboorteDatum = new DateTime(2024, 11, 6, 15, 48, 0, 203, DateTimeKind.Local).AddTicks(6338),
                            Naam = "Molestiae mollitia aut quis minus assumenda et pariatur culpa occaecati possimus totam ut labore non error quam corporis quidem ea.",
                            OpleidingId = 18,
                            StudentenkaartId = 18
                        },
                        new
                        {
                            Id = 19,
                            Adres = "Nickplantsoen 98",
                            EMail = "culpa",
                            GeboorteDatum = new DateTime(2024, 9, 2, 21, 1, 54, 34, DateTimeKind.Local).AddTicks(2993),
                            Naam = "Est unde reprehenderit ex eaque eaque aperiam ratione delectus consequatur rerum aut architecto eos ratione qui facere voluptate inventore et.",
                            OpleidingId = 19,
                            StudentenkaartId = 19
                        },
                        new
                        {
                            Id = 20,
                            Adres = "Smitsteeg 883c",
                            EMail = "voluptate",
                            GeboorteDatum = new DateTime(2024, 11, 19, 18, 27, 44, 540, DateTimeKind.Local).AddTicks(9659),
                            Naam = "Ut neque culpa quam quaerat sed quia aut inventore non similique enim distinctio repudiandae debitis et sed cumque accusamus voluptates.",
                            OpleidingId = 20,
                            StudentenkaartId = 20
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.Opleiding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeschikbarePlaatsen")
                        .HasColumnType("int");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duur")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Opleidingen");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            BeschikbarePlaatsen = 239,
                            Beschrijving = "Saepe qui et vel non ut tempora ut eos perspiciatis similique quasi dolorem enim blanditiis at tempore quaerat nulla occaecati.",
                            Duur = 3,
                            Naam = "Placeat quisquam nam voluptatum distinctio eum labore ex voluptate voluptatum distinctio sed dolores consequuntur repellendus sed aut veritatis ratione repellat."
                        },
                        new
                        {
                            Id = 12,
                            BeschikbarePlaatsen = 371,
                            Beschrijving = "Sunt facilis cupiditate consequatur consequuntur autem doloremque quod ut dolorem vel quis molestias quaerat explicabo earum non eveniet et et.",
                            Duur = 4,
                            Naam = "Dicta tempore iure aut consequuntur ipsum et omnis aspernatur quo temporibus perferendis eum eveniet aut expedita pariatur illo provident aut."
                        },
                        new
                        {
                            Id = 13,
                            BeschikbarePlaatsen = 221,
                            Beschrijving = "Sapiente rerum a minima quis iusto amet aut architecto velit sint ut quo vitae odio sequi sed beatae voluptatem rerum.",
                            Duur = 4,
                            Naam = "Ut eaque dicta vel similique reprehenderit voluptas cumque similique quas hic magnam voluptatem dolorum quia ipsam totam non consectetur voluptas."
                        },
                        new
                        {
                            Id = 14,
                            BeschikbarePlaatsen = 341,
                            Beschrijving = "Sit quo hic rem id qui quas nobis eum sunt vel possimus et qui pariatur in quia est rem quis.",
                            Duur = 4,
                            Naam = "Neque totam autem adipisci sint recusandae sed assumenda aspernatur id explicabo quia totam ipsam blanditiis expedita cupiditate ut cupiditate corrupti."
                        },
                        new
                        {
                            Id = 15,
                            BeschikbarePlaatsen = 259,
                            Beschrijving = "Qui est asperiores delectus voluptate et voluptatem reprehenderit modi ut dolor blanditiis nulla est nihil reprehenderit quia necessitatibus et ut.",
                            Duur = 3,
                            Naam = "Mollitia inventore voluptas quod iure rerum porro voluptas officiis reprehenderit recusandae tenetur aut neque quia illo optio non odit doloribus."
                        },
                        new
                        {
                            Id = 16,
                            BeschikbarePlaatsen = 327,
                            Beschrijving = "Corporis ex eligendi dolorem consequatur qui nemo qui ut magnam fugit enim dicta porro qui deserunt aut quia possimus qui.",
                            Duur = 4,
                            Naam = "Esse velit officia voluptatibus doloribus eligendi vero eaque quo blanditiis rerum corrupti omnis enim minus consequuntur ut dolore qui est."
                        },
                        new
                        {
                            Id = 17,
                            BeschikbarePlaatsen = 320,
                            Beschrijving = "Debitis nobis dicta mollitia dolores natus fugiat minima nesciunt ipsam quia quibusdam praesentium et voluptatem vero possimus perferendis nostrum placeat.",
                            Duur = 4,
                            Naam = "Suscipit quo et quo voluptates delectus voluptas autem rerum et nobis ut libero non numquam voluptatem voluptates fugiat rem ducimus."
                        },
                        new
                        {
                            Id = 18,
                            BeschikbarePlaatsen = 233,
                            Beschrijving = "Et iste voluptatibus exercitationem enim maiores a rem ut laboriosam rerum laudantium omnis at et dolor ea saepe consequuntur sequi.",
                            Duur = 3,
                            Naam = "Earum quis sequi harum expedita et saepe quasi libero porro iusto autem ex delectus voluptate qui magnam quasi qui est."
                        },
                        new
                        {
                            Id = 19,
                            BeschikbarePlaatsen = 365,
                            Beschrijving = "Modi eum et quia esse in ullam non dolor exercitationem amet rerum minus ad totam voluptatem rerum voluptatum veritatis sequi.",
                            Duur = 3,
                            Naam = "Possimus accusamus est dicta est commodi aut ipsa veniam expedita sequi perspiciatis quis cum et omnis accusantium aut quia autem."
                        },
                        new
                        {
                            Id = 20,
                            BeschikbarePlaatsen = 358,
                            Beschrijving = "Est cupiditate labore omnis quas quo enim ut ut fugiat eligendi nisi dolorem nobis recusandae qui repellendus quia odio dolore.",
                            Duur = 3,
                            Naam = "Reiciendis quisquam itaque voluptatem sunt laboriosam asperiores ut ratione esse tempore aut facere dolorum ea quia aliquam corrupti impedit ut."
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.StudentenKaart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Klas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentenKaarten");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Klas = "deserunt",
                            Naam = "Msc Pieter Bos",
                            School = "Broek IT"
                        },
                        new
                        {
                            Id = 12,
                            Klas = "velit",
                            Naam = "Mevr. Dr. Nox Vries",
                            School = "Schouten - Peters"
                        },
                        new
                        {
                            Id = 13,
                            Klas = "et",
                            Naam = "Aron Bos II",
                            School = "Groot - Veen"
                        },
                        new
                        {
                            Id = 14,
                            Klas = "magnam",
                            Naam = "Dhr. Jinthe Bruin",
                            School = "Dijk Online"
                        },
                        new
                        {
                            Id = 15,
                            Klas = "dolor",
                            Naam = "Mevr. Dr. Kyano Bosch",
                            School = "Vermeulen, Peters and Kok"
                        },
                        new
                        {
                            Id = 16,
                            Klas = "nesciunt",
                            Naam = "Prof. Yasmine Vos",
                            School = "Wit BV"
                        },
                        new
                        {
                            Id = 17,
                            Klas = "voluptatem",
                            Naam = "Puck Leeuwen I",
                            School = "Groot NV"
                        },
                        new
                        {
                            Id = 18,
                            Klas = "voluptatibus",
                            Naam = "Bsc Danilo Ven",
                            School = "Graaf - Hendriks"
                        },
                        new
                        {
                            Id = 19,
                            Klas = "occaecati",
                            Naam = "Juliette Brouwer Jr.",
                            School = "Hendriks Online"
                        },
                        new
                        {
                            Id = 20,
                            Klas = "laboriosam",
                            Naam = "Prof. Jet Koster",
                            School = "Janssen, Klein and Bakker"
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.Vak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AantalStudiePunten")
                        .HasColumnType("int");

                    b.Property<int>("LeerkrachtId")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Taal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Vaktype")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeerkrachtId");

                    b.ToTable("Vakken");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            AantalStudiePunten = 25,
                            LeerkrachtId = 0,
                            Naam = "Mevr. Dr. Jeppe Bos",
                            Taal = "New York",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 12,
                            AantalStudiePunten = 40,
                            LeerkrachtId = 0,
                            Naam = "Rens Broek III",
                            Taal = "Intelligent",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 13,
                            AantalStudiePunten = 27,
                            LeerkrachtId = 0,
                            Naam = "Prof. Nadir Vliet",
                            Taal = "Morocco",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 14,
                            AantalStudiePunten = 26,
                            LeerkrachtId = 0,
                            Naam = "Sem Wal III",
                            Taal = "invoice",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 15,
                            AantalStudiePunten = 29,
                            LeerkrachtId = 0,
                            Naam = "Vik Veen III",
                            Taal = "Trafficway",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 16,
                            AantalStudiePunten = 31,
                            LeerkrachtId = 0,
                            Naam = "Dhr. Xander Visser",
                            Taal = "integrate",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 17,
                            AantalStudiePunten = 46,
                            LeerkrachtId = 0,
                            Naam = "Eline Dijkstra IV",
                            Taal = "Canyon",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 18,
                            AantalStudiePunten = 18,
                            LeerkrachtId = 0,
                            Naam = "Hailey Vries III",
                            Taal = "Orchestrator",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 19,
                            AantalStudiePunten = 14,
                            LeerkrachtId = 0,
                            Naam = "Jayce Ruiter V",
                            Taal = "channels",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 20,
                            AantalStudiePunten = 49,
                            LeerkrachtId = 0,
                            Naam = "Bsc Coco Maas",
                            Taal = "National",
                            Vaktype = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.HasOne("Simpleschool.Models.Opleiding", null)
                        .WithMany()
                        .HasForeignKey("OpleidingenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simpleschool.Models.Vak", null)
                        .WithMany()
                        .HasForeignKey("VakkenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Simpleschool.Models.Leerling", b =>
                {
                    b.HasOne("Simpleschool.Models.Opleiding", "Opleiding")
                        .WithMany("Leerlingen")
                        .HasForeignKey("OpleidingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simpleschool.Models.StudentenKaart", "Studentenkaart")
                        .WithOne("Leerling")
                        .HasForeignKey("Simpleschool.Models.Leerling", "StudentenkaartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opleiding");

                    b.Navigation("Studentenkaart");
                });

            modelBuilder.Entity("Simpleschool.Models.Vak", b =>
                {
                    b.HasOne("Simpleschool.Models.Leerkracht", "Leerkracht")
                        .WithMany("Vakken")
                        .HasForeignKey("LeerkrachtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leerkracht");
                });

            modelBuilder.Entity("Simpleschool.Models.Leerkracht", b =>
                {
                    b.Navigation("Vakken");
                });

            modelBuilder.Entity("Simpleschool.Models.Opleiding", b =>
                {
                    b.Navigation("Leerlingen");
                });

            modelBuilder.Entity("Simpleschool.Models.StudentenKaart", b =>
                {
                    b.Navigation("Leerling")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
