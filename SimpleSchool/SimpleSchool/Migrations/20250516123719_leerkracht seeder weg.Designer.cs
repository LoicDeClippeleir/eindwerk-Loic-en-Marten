// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleSchool.Data;

#nullable disable

namespace SimpleSchool.Migrations
{
    [DbContext(typeof(SimpleSchoolContext))]
    [Migration("20250516123719_leerkracht seeder weg")]
    partial class leerkrachtseederweg
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.Property<int>("OpleidingenId")
                        .HasColumnType("int");

                    b.Property<int>("VakkenId")
                        .HasColumnType("int");

                    b.HasKey("OpleidingenId", "VakkenId");

                    b.HasIndex("VakkenId");

                    b.ToTable("Opleidingsvakken", (string)null);
                });

            modelBuilder.Entity("Simpleschool.Models.Leerkracht", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Leerkracht");
                });

            modelBuilder.Entity("Simpleschool.Models.Leerling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpleidingId")
                        .HasColumnType("int");

                    b.Property<int>("StudentenkaartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpleidingId");

                    b.HasIndex("StudentenkaartId")
                        .IsUnique();

                    b.ToTable("Leerling");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Adres = "Maasmarkt 903c",
                            EMail = "laudantium",
                            GeboorteDatum = new DateTime(2025, 3, 4, 15, 43, 22, 864, DateTimeKind.Local).AddTicks(9159),
                            Naam = "Optio velit nesciunt aut suscipit a qui nihil ratione nostrum aut sunt quasi corporis labore et quaerat labore velit quo.",
                            OpleidingId = 11,
                            StudentenkaartId = 11
                        },
                        new
                        {
                            Id = 12,
                            Adres = "Jongplein 824a",
                            EMail = "delectus",
                            GeboorteDatum = new DateTime(2024, 8, 20, 17, 46, 25, 692, DateTimeKind.Local).AddTicks(2056),
                            Naam = "Temporibus ratione quibusdam fugit corrupti et odio quas excepturi adipisci laudantium eos officiis qui et et fuga inventore voluptatem rerum.",
                            OpleidingId = 12,
                            StudentenkaartId = 12
                        },
                        new
                        {
                            Id = 13,
                            Adres = "Roospark 980c",
                            EMail = "veritatis",
                            GeboorteDatum = new DateTime(2024, 8, 5, 9, 22, 53, 694, DateTimeKind.Local).AddTicks(7830),
                            Naam = "Quasi cum praesentium voluptates id ab explicabo eos voluptatem non dolor quaerat veniam facilis esse consequuntur dignissimos porro nam voluptatibus.",
                            OpleidingId = 13,
                            StudentenkaartId = 13
                        },
                        new
                        {
                            Id = 14,
                            Adres = "Dekkersloot 799c",
                            EMail = "quam",
                            GeboorteDatum = new DateTime(2024, 6, 7, 22, 23, 52, 773, DateTimeKind.Local).AddTicks(1),
                            Naam = "Nostrum vitae sit rerum assumenda delectus id qui ipsum dolorem saepe qui vitae blanditiis velit quas eaque qui et minus.",
                            OpleidingId = 14,
                            StudentenkaartId = 14
                        },
                        new
                        {
                            Id = 15,
                            Adres = "Roosstraat 844",
                            EMail = "sint",
                            GeboorteDatum = new DateTime(2025, 3, 15, 13, 49, 13, 173, DateTimeKind.Local).AddTicks(9971),
                            Naam = "Blanditiis repellat et facere nihil cupiditate enim odit perferendis totam repellendus repudiandae accusantium ut quod aliquid eos autem numquam modi.",
                            OpleidingId = 15,
                            StudentenkaartId = 15
                        },
                        new
                        {
                            Id = 16,
                            Adres = "Kevinpassage 00",
                            EMail = "aut",
                            GeboorteDatum = new DateTime(2024, 9, 26, 21, 54, 39, 311, DateTimeKind.Local).AddTicks(5140),
                            Naam = "Temporibus perspiciatis voluptatem facilis dignissimos expedita recusandae molestiae ducimus eius atque ut tempore eius sit eum enim et ut rem.",
                            OpleidingId = 16,
                            StudentenkaartId = 16
                        },
                        new
                        {
                            Id = 17,
                            Adres = "Hendriksgracht 297a",
                            EMail = "dolores",
                            GeboorteDatum = new DateTime(2024, 6, 29, 12, 55, 26, 867, DateTimeKind.Local).AddTicks(856),
                            Naam = "Voluptatem blanditiis quas aut atque maxime vitae quidem ea ullam hic iste et ipsam omnis eum explicabo enim mollitia sed.",
                            OpleidingId = 17,
                            StudentenkaartId = 17
                        },
                        new
                        {
                            Id = 18,
                            Adres = "Graafsloot 216b",
                            EMail = "libero",
                            GeboorteDatum = new DateTime(2024, 10, 22, 2, 56, 51, 28, DateTimeKind.Local).AddTicks(6021),
                            Naam = "Ut enim aut iusto repudiandae iusto explicabo in est facilis maiores doloribus eum ipsa quia aut eveniet sit sunt aliquam.",
                            OpleidingId = 18,
                            StudentenkaartId = 18
                        },
                        new
                        {
                            Id = 19,
                            Adres = "Nielspassage 262a",
                            EMail = "quam",
                            GeboorteDatum = new DateTime(2025, 4, 21, 2, 40, 21, 82, DateTimeKind.Local).AddTicks(9204),
                            Naam = "Totam qui odio voluptas voluptatem dolores perferendis est maxime enim dolores explicabo aut quam ullam quia voluptas voluptatem accusantium sit.",
                            OpleidingId = 19,
                            StudentenkaartId = 19
                        },
                        new
                        {
                            Id = 20,
                            Adres = "Nicksloot 413 III",
                            EMail = "est",
                            GeboorteDatum = new DateTime(2025, 5, 1, 1, 23, 39, 161, DateTimeKind.Local).AddTicks(6320),
                            Naam = "Omnis est inventore ipsum sed enim molestiae eum architecto mollitia perspiciatis at doloremque et minus totam rem ab voluptatum qui.",
                            OpleidingId = 20,
                            StudentenkaartId = 20
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.Opleiding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeschikbarePlaatsen")
                        .HasColumnType("int");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duur")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Opleiding");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            BeschikbarePlaatsen = 330,
                            Beschrijving = "Quae qui nesciunt nostrum est consectetur temporibus vel voluptate corrupti iste qui voluptatem quasi ipsa error eligendi fuga aut recusandae.",
                            Duur = 4,
                            Naam = "Ut expedita repellat et recusandae numquam vitae facilis alias quaerat nostrum quaerat molestias maxime excepturi in et et architecto magni."
                        },
                        new
                        {
                            Id = 12,
                            BeschikbarePlaatsen = 262,
                            Beschrijving = "Hic quaerat modi sint aut eos quia esse eaque veniam unde in unde ex qui porro incidunt libero et enim.",
                            Duur = 3,
                            Naam = "Dolorum quis totam voluptatem qui rem iusto expedita eveniet vitae ab qui assumenda possimus et beatae facilis mollitia ipsam consectetur."
                        },
                        new
                        {
                            Id = 13,
                            BeschikbarePlaatsen = 341,
                            Beschrijving = "Id debitis quia cum a fugit velit labore laborum non voluptatem nisi debitis autem officia fugiat veniam necessitatibus hic neque.",
                            Duur = 3,
                            Naam = "Sed et veniam ab exercitationem aut unde harum in nesciunt maxime dolores recusandae dolorem eius in est nobis molestiae sit."
                        },
                        new
                        {
                            Id = 14,
                            BeschikbarePlaatsen = 365,
                            Beschrijving = "Voluptatibus qui reprehenderit reiciendis eius consectetur dolorem exercitationem assumenda eos sit maxime nobis rerum itaque voluptas velit minus recusandae non.",
                            Duur = 3,
                            Naam = "Iusto nemo dolore suscipit consectetur sit autem nemo corporis deleniti blanditiis doloremque sunt quo deserunt eaque assumenda facere quae non."
                        },
                        new
                        {
                            Id = 15,
                            BeschikbarePlaatsen = 366,
                            Beschrijving = "Assumenda ducimus atque et architecto dolorem fuga officiis laboriosam dolorem mollitia facere corporis non accusamus nam laborum accusamus consequuntur quia.",
                            Duur = 4,
                            Naam = "Illo et ipsum deserunt a cumque laudantium in sed libero molestias fugiat blanditiis et pariatur doloremque unde aliquam libero corporis."
                        },
                        new
                        {
                            Id = 16,
                            BeschikbarePlaatsen = 336,
                            Beschrijving = "Nobis et sed autem sit quos qui natus consectetur quasi error explicabo aut minima ab aut ea non modi sed.",
                            Duur = 3,
                            Naam = "Omnis voluptas aut necessitatibus ullam totam atque natus autem rerum ut minima nihil repudiandae error et sapiente eos perferendis maxime."
                        },
                        new
                        {
                            Id = 17,
                            BeschikbarePlaatsen = 280,
                            Beschrijving = "Nobis velit dolores ex aliquid aliquid et occaecati in labore dignissimos ipsa at ut explicabo dolorem hic laboriosam quia corporis.",
                            Duur = 3,
                            Naam = "Qui in ullam nulla sunt ea laborum et illum voluptate earum qui quis possimus sapiente iste quia sit voluptatem magni."
                        },
                        new
                        {
                            Id = 18,
                            BeschikbarePlaatsen = 342,
                            Beschrijving = "Ipsam et quibusdam in nemo et libero enim sunt sit aut tempora rerum accusamus et natus quo accusamus deserunt ut.",
                            Duur = 3,
                            Naam = "Temporibus et omnis ea dolores aut corporis aut et officia ex illo magnam est atque assumenda culpa molestias nostrum tempora."
                        },
                        new
                        {
                            Id = 19,
                            BeschikbarePlaatsen = 300,
                            Beschrijving = "Eos recusandae culpa unde inventore dolorem dolor ut molestiae minima est dolore ut rem rerum qui nisi enim aliquam modi.",
                            Duur = 3,
                            Naam = "Voluptas et voluptatem atque voluptatum iste ut facere qui consequatur ea doloremque nobis commodi molestiae nulla error voluptas qui fugiat."
                        },
                        new
                        {
                            Id = 20,
                            BeschikbarePlaatsen = 374,
                            Beschrijving = "Et fugiat dolore et reiciendis officiis est adipisci temporibus molestiae totam corrupti vel itaque ipsam rerum odio et non ea.",
                            Duur = 3,
                            Naam = "Maiores aut excepturi aspernatur fuga placeat qui ipsa eaque voluptate sed laboriosam qui quidem laborum non hic dolorum eius eos."
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.StudentenKaart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Klas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentenKaart");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Klas = "incidunt",
                            Naam = "Faye Dam I",
                            School = "Brink - Ruiter"
                        },
                        new
                        {
                            Id = 12,
                            Klas = "a",
                            Naam = "Thiago Kok III",
                            School = "Boer Groep"
                        },
                        new
                        {
                            Id = 13,
                            Klas = "et",
                            Naam = "Dhr. Diede Dijkstra",
                            School = "Janssen - Vries"
                        },
                        new
                        {
                            Id = 14,
                            Klas = "natus",
                            Naam = "Valentijn Meer V",
                            School = "Graaf - Koster"
                        },
                        new
                        {
                            Id = 15,
                            Klas = "dolores",
                            Naam = "Noëlla Haan II",
                            School = "Jacobs - Janssen"
                        },
                        new
                        {
                            Id = 16,
                            Klas = "mollitia",
                            Naam = "Liselotte Klein I",
                            School = "Brink, Vries and Kok"
                        },
                        new
                        {
                            Id = 17,
                            Klas = "laudantium",
                            Naam = "Lux Bruin V",
                            School = "Brouwer, Bakker and Stichting"
                        },
                        new
                        {
                            Id = 18,
                            Klas = "architecto",
                            Naam = "Msc Isa Janssen",
                            School = "Hendriks - Brink"
                        },
                        new
                        {
                            Id = 19,
                            Klas = "nesciunt",
                            Naam = "Mevr. Dr. Benyamin Dijkstra",
                            School = "Dekker Group"
                        },
                        new
                        {
                            Id = 20,
                            Klas = "et",
                            Naam = "Marrit Stichting Jr.",
                            School = "Vliet, Dijkstra and Vermeulen"
                        });
                });

            modelBuilder.Entity("Simpleschool.Models.Vak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AantalStudiePunten")
                        .HasColumnType("int");

                    b.Property<int>("LeerkrachtId")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Taal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Vaktype")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeerkrachtId");

                    b.ToTable("Vak");
                });

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.HasOne("Simpleschool.Models.Opleiding", null)
                        .WithMany()
                        .HasForeignKey("OpleidingenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simpleschool.Models.Vak", null)
                        .WithMany()
                        .HasForeignKey("VakkenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Simpleschool.Models.Leerling", b =>
                {
                    b.HasOne("Simpleschool.Models.Opleiding", "Opleiding")
                        .WithMany("Leerlingen")
                        .HasForeignKey("OpleidingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simpleschool.Models.StudentenKaart", "Studentenkaart")
                        .WithOne("Leerling")
                        .HasForeignKey("Simpleschool.Models.Leerling", "StudentenkaartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opleiding");

                    b.Navigation("Studentenkaart");
                });

            modelBuilder.Entity("Simpleschool.Models.Vak", b =>
                {
                    b.HasOne("Simpleschool.Models.Leerkracht", "Leerkracht")
                        .WithMany("Vakken")
                        .HasForeignKey("LeerkrachtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leerkracht");
                });

            modelBuilder.Entity("Simpleschool.Models.Leerkracht", b =>
                {
                    b.Navigation("Vakken");
                });

            modelBuilder.Entity("Simpleschool.Models.Opleiding", b =>
                {
                    b.Navigation("Leerlingen");
                });

            modelBuilder.Entity("Simpleschool.Models.StudentenKaart", b =>
                {
                    b.Navigation("Leerling")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
