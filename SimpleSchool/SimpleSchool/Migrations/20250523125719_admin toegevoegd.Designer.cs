// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleSchool.Data;

#nullable disable

namespace SimpleSchool.Migrations
{
    [DbContext(typeof(SimpleSchoolContext))]
    [Migration("20250523125719_admin toegevoegd")]
    partial class admintoegevoegd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.Property<int>("OpleidingenId")
                        .HasColumnType("int");

                    b.Property<int>("VakkenId")
                        .HasColumnType("int");

                    b.HasKey("OpleidingenId", "VakkenId");

                    b.HasIndex("VakkenId");

                    b.ToTable("Opleidingsvakken", (string)null);
                });

            modelBuilder.Entity("SimpleSchool.Models.Leerkracht", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Leerkracht");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Adres = "Noapark 5",
                            EMail = "et",
                            GeboorteDatum = new DateTime(2024, 10, 23, 22, 46, 50, 227, DateTimeKind.Local).AddTicks(7472),
                            Naam = "Jayden Bruin"
                        },
                        new
                        {
                            Id = 12,
                            Adres = "Brouwersteeg 566 I",
                            EMail = "dolorem",
                            GeboorteDatum = new DateTime(2024, 6, 13, 23, 7, 22, 57, DateTimeKind.Local).AddTicks(9006),
                            Naam = "Johannes Vermeulen"
                        },
                        new
                        {
                            Id = 13,
                            Adres = "Daanplantsoen 742a",
                            EMail = "soluta",
                            GeboorteDatum = new DateTime(2024, 11, 22, 10, 47, 45, 725, DateTimeKind.Local).AddTicks(5053),
                            Naam = "Maud Wit"
                        },
                        new
                        {
                            Id = 14,
                            Adres = "Petersplein 394c",
                            EMail = "voluptatem",
                            GeboorteDatum = new DateTime(2024, 11, 1, 3, 1, 26, 166, DateTimeKind.Local).AddTicks(2268),
                            Naam = "Julian Bakker"
                        },
                        new
                        {
                            Id = 15,
                            Adres = "Femkepassage 655a",
                            EMail = "dolor",
                            GeboorteDatum = new DateTime(2024, 8, 26, 4, 25, 13, 349, DateTimeKind.Local).AddTicks(1494),
                            Naam = "Amber Schouten"
                        },
                        new
                        {
                            Id = 16,
                            Adres = "Boersloot 739a",
                            EMail = "vel",
                            GeboorteDatum = new DateTime(2024, 8, 26, 5, 9, 28, 164, DateTimeKind.Local).AddTicks(5793),
                            Naam = "Thijs Visser"
                        },
                        new
                        {
                            Id = 17,
                            Adres = "Brinkweg 0",
                            EMail = "et",
                            GeboorteDatum = new DateTime(2025, 2, 3, 11, 36, 32, 91, DateTimeKind.Local).AddTicks(8627),
                            Naam = "Bas Broek"
                        },
                        new
                        {
                            Id = 18,
                            Adres = "Kostergracht 749 II",
                            EMail = "consequatur",
                            GeboorteDatum = new DateTime(2024, 10, 21, 2, 1, 48, 528, DateTimeKind.Local).AddTicks(5431),
                            Naam = "Nick Smits"
                        },
                        new
                        {
                            Id = 19,
                            Adres = "Grootpassage 2",
                            EMail = "ipsam",
                            GeboorteDatum = new DateTime(2025, 4, 1, 19, 48, 52, 540, DateTimeKind.Local).AddTicks(4399),
                            Naam = "Bas Dekker"
                        },
                        new
                        {
                            Id = 20,
                            Adres = "Liekerijk 358b",
                            EMail = "ducimus",
                            GeboorteDatum = new DateTime(2024, 9, 13, 9, 22, 47, 631, DateTimeKind.Local).AddTicks(7317),
                            Naam = "Jasper Smits"
                        });
                });

            modelBuilder.Entity("SimpleSchool.Models.Leerling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpleidingId")
                        .HasColumnType("int");

                    b.Property<int>("StudentenkaartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpleidingId");

                    b.HasIndex("StudentenkaartId")
                        .IsUnique();

                    b.ToTable("Leerling");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Adres = "Smitsplantsoen 223b",
                            EMail = "facere",
                            GeboorteDatum = new DateTime(2024, 9, 25, 2, 51, 10, 274, DateTimeKind.Local).AddTicks(5318),
                            Naam = "Tim Meer",
                            OpleidingId = 11,
                            StudentenkaartId = 11
                        },
                        new
                        {
                            Id = 12,
                            Adres = "Larsplantsoen 484 I",
                            EMail = "pariatur",
                            GeboorteDatum = new DateTime(2024, 10, 7, 3, 30, 6, 583, DateTimeKind.Local).AddTicks(6092),
                            Naam = "Sanne Graaf",
                            OpleidingId = 12,
                            StudentenkaartId = 12
                        },
                        new
                        {
                            Id = 13,
                            Adres = "Grootweg 950 III",
                            EMail = "magni",
                            GeboorteDatum = new DateTime(2024, 6, 28, 11, 27, 27, 274, DateTimeKind.Local).AddTicks(8840),
                            Naam = "Britt Hendriks",
                            OpleidingId = 13,
                            StudentenkaartId = 13
                        },
                        new
                        {
                            Id = 14,
                            Adres = "Bruinpark 030 I",
                            EMail = "est",
                            GeboorteDatum = new DateTime(2025, 4, 1, 2, 10, 42, 870, DateTimeKind.Local).AddTicks(7200),
                            Naam = "Julian Brouwer",
                            OpleidingId = 14,
                            StudentenkaartId = 14
                        },
                        new
                        {
                            Id = 15,
                            Adres = "Irispark 164 I",
                            EMail = "exercitationem",
                            GeboorteDatum = new DateTime(2025, 1, 16, 19, 40, 18, 474, DateTimeKind.Local).AddTicks(6600),
                            Naam = "Femke Ven",
                            OpleidingId = 15,
                            StudentenkaartId = 15
                        },
                        new
                        {
                            Id = 16,
                            Adres = "Julianmarkt 549 I",
                            EMail = "et",
                            GeboorteDatum = new DateTime(2025, 2, 13, 2, 14, 27, 633, DateTimeKind.Local).AddTicks(9173),
                            Naam = "Sven Meijer",
                            OpleidingId = 16,
                            StudentenkaartId = 16
                        },
                        new
                        {
                            Id = 17,
                            Adres = "Sanderstraat 8",
                            EMail = "tenetur",
                            GeboorteDatum = new DateTime(2024, 10, 4, 5, 31, 47, 667, DateTimeKind.Local).AddTicks(8396),
                            Naam = "Eva Peters",
                            OpleidingId = 17,
                            StudentenkaartId = 17
                        },
                        new
                        {
                            Id = 18,
                            Adres = "Meijerstraat 257",
                            EMail = "aut",
                            GeboorteDatum = new DateTime(2025, 3, 6, 20, 55, 41, 686, DateTimeKind.Local).AddTicks(2112),
                            Naam = "Thijs Broek",
                            OpleidingId = 18,
                            StudentenkaartId = 18
                        },
                        new
                        {
                            Id = 19,
                            Adres = "Mulderkade 644",
                            EMail = "ut",
                            GeboorteDatum = new DateTime(2024, 11, 20, 22, 16, 28, 929, DateTimeKind.Local).AddTicks(7784),
                            Naam = "Stijn Wit",
                            OpleidingId = 19,
                            StudentenkaartId = 19
                        },
                        new
                        {
                            Id = 20,
                            Adres = "Johannesrijk 071a",
                            EMail = "quia",
                            GeboorteDatum = new DateTime(2024, 9, 20, 16, 24, 52, 4, DateTimeKind.Local).AddTicks(6585),
                            Naam = "Bram Brink",
                            OpleidingId = 20,
                            StudentenkaartId = 20
                        });
                });

            modelBuilder.Entity("SimpleSchool.Models.Opleiding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeschikbarePlaatsen")
                        .HasColumnType("int");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duur")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Opleiding");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            BeschikbarePlaatsen = 332,
                            Beschrijving = "Voluptatum suscipit et vel tempore ea quae cum qui dignissimos.",
                            Duur = 4,
                            Naam = "Quis quisquam ratione."
                        },
                        new
                        {
                            Id = 12,
                            BeschikbarePlaatsen = 320,
                            Beschrijving = "Recusandae nihil aut non nihil expedita quisquam laborum qui quae.",
                            Duur = 4,
                            Naam = "Et saepe ut."
                        },
                        new
                        {
                            Id = 13,
                            BeschikbarePlaatsen = 384,
                            Beschrijving = "Ullam nobis occaecati eaque et omnis ullam est inventore a.",
                            Duur = 4,
                            Naam = "Nulla natus possimus."
                        },
                        new
                        {
                            Id = 14,
                            BeschikbarePlaatsen = 235,
                            Beschrijving = "Sed reprehenderit officiis pariatur illo hic est numquam aliquam consequatur.",
                            Duur = 4,
                            Naam = "Omnis beatae at."
                        },
                        new
                        {
                            Id = 15,
                            BeschikbarePlaatsen = 366,
                            Beschrijving = "Voluptas nostrum eos nam ratione rerum autem adipisci itaque quae.",
                            Duur = 4,
                            Naam = "Facere est quae."
                        },
                        new
                        {
                            Id = 16,
                            BeschikbarePlaatsen = 230,
                            Beschrijving = "Culpa accusamus nobis velit non blanditiis est voluptates atque ut.",
                            Duur = 4,
                            Naam = "Harum est illo."
                        },
                        new
                        {
                            Id = 17,
                            BeschikbarePlaatsen = 210,
                            Beschrijving = "Eum aliquam rerum incidunt fugit voluptatem itaque amet dolor tempora.",
                            Duur = 3,
                            Naam = "Est totam voluptatem."
                        },
                        new
                        {
                            Id = 18,
                            BeschikbarePlaatsen = 284,
                            Beschrijving = "Quia iste et odit nihil aut ipsa harum fugiat quis.",
                            Duur = 4,
                            Naam = "Maxime adipisci recusandae."
                        },
                        new
                        {
                            Id = 19,
                            BeschikbarePlaatsen = 291,
                            Beschrijving = "Deleniti aut nesciunt necessitatibus eius vel necessitatibus dolorem vero necessitatibus.",
                            Duur = 4,
                            Naam = "Sequi eum et."
                        },
                        new
                        {
                            Id = 20,
                            BeschikbarePlaatsen = 237,
                            Beschrijving = "Voluptatem facere odit veritatis quibusdam magni tempora nesciunt est ipsum.",
                            Duur = 3,
                            Naam = "Rerum nobis et."
                        });
                });

            modelBuilder.Entity("SimpleSchool.Models.StudentenKaart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Klas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentenKaart");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Klas = "totam",
                            Naam = "Ella Peters Sr.",
                            School = "Dekker, Broek and Heuvel"
                        },
                        new
                        {
                            Id = 12,
                            Klas = "in",
                            Naam = "Prof. Mare Janssen",
                            School = "Heuvel Group"
                        },
                        new
                        {
                            Id = 13,
                            Klas = "at",
                            Naam = "Leon Smits Sr.",
                            School = "Haan, Visser and Vries"
                        },
                        new
                        {
                            Id = 14,
                            Klas = "pariatur",
                            Naam = "Mevr. Dr. Medina Ven",
                            School = "Meer - Vries"
                        },
                        new
                        {
                            Id = 15,
                            Klas = "officiis",
                            Naam = "Dhr. Bob Jansen",
                            School = "Groot - Bakker"
                        },
                        new
                        {
                            Id = 16,
                            Klas = "itaque",
                            Naam = "Prof. Mert Dijk",
                            School = "Janssen - Heuvel"
                        },
                        new
                        {
                            Id = 17,
                            Klas = "nesciunt",
                            Naam = "Jackson Visser IV",
                            School = "Groot International"
                        },
                        new
                        {
                            Id = 18,
                            Klas = "sit",
                            Naam = "Dhr. Oumayra Boer",
                            School = "Koning N.V."
                        },
                        new
                        {
                            Id = 19,
                            Klas = "animi",
                            Naam = "Prof. Jenna Ruiter",
                            School = "Janssen, Schouten and Hendriks"
                        },
                        new
                        {
                            Id = 20,
                            Klas = "doloribus",
                            Naam = "Britt Heuvel Jr.",
                            School = "Maas - Janssen"
                        });
                });

            modelBuilder.Entity("SimpleSchool.Models.Vak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AantalStudiePunten")
                        .HasColumnType("int");

                    b.Property<int>("LeerkrachtId")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Taal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Vaktype")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeerkrachtId");

                    b.ToTable("Vak");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            AantalStudiePunten = 35,
                            LeerkrachtId = 11,
                            Naam = "repellendus",
                            Taal = "vero",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 12,
                            AantalStudiePunten = 46,
                            LeerkrachtId = 12,
                            Naam = "a",
                            Taal = "quos",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 13,
                            AantalStudiePunten = 40,
                            LeerkrachtId = 13,
                            Naam = "quia",
                            Taal = "aperiam",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 14,
                            AantalStudiePunten = 33,
                            LeerkrachtId = 14,
                            Naam = "quae",
                            Taal = "veniam",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 15,
                            AantalStudiePunten = 25,
                            LeerkrachtId = 15,
                            Naam = "minus",
                            Taal = "repellendus",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 16,
                            AantalStudiePunten = 15,
                            LeerkrachtId = 16,
                            Naam = "adipisci",
                            Taal = "est",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 17,
                            AantalStudiePunten = 26,
                            LeerkrachtId = 17,
                            Naam = "aut",
                            Taal = "officia",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 18,
                            AantalStudiePunten = 23,
                            LeerkrachtId = 18,
                            Naam = "eveniet",
                            Taal = "tenetur",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 19,
                            AantalStudiePunten = 39,
                            LeerkrachtId = 19,
                            Naam = "unde",
                            Taal = "possimus",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 20,
                            AantalStudiePunten = 49,
                            LeerkrachtId = 20,
                            Naam = "voluptas",
                            Taal = "aut",
                            Vaktype = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.HasOne("SimpleSchool.Models.Opleiding", null)
                        .WithMany()
                        .HasForeignKey("OpleidingenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleSchool.Models.Vak", null)
                        .WithMany()
                        .HasForeignKey("VakkenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleSchool.Models.Leerling", b =>
                {
                    b.HasOne("SimpleSchool.Models.Opleiding", "Opleiding")
                        .WithMany("Leerlingen")
                        .HasForeignKey("OpleidingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleSchool.Models.StudentenKaart", "Studentenkaart")
                        .WithOne("Leerling")
                        .HasForeignKey("SimpleSchool.Models.Leerling", "StudentenkaartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opleiding");

                    b.Navigation("Studentenkaart");
                });

            modelBuilder.Entity("SimpleSchool.Models.Vak", b =>
                {
                    b.HasOne("SimpleSchool.Models.Leerkracht", "Leerkracht")
                        .WithMany("Vakken")
                        .HasForeignKey("LeerkrachtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leerkracht");
                });

            modelBuilder.Entity("SimpleSchool.Models.Leerkracht", b =>
                {
                    b.Navigation("Vakken");
                });

            modelBuilder.Entity("SimpleSchool.Models.Opleiding", b =>
                {
                    b.Navigation("Leerlingen");
                });

            modelBuilder.Entity("SimpleSchool.Models.StudentenKaart", b =>
                {
                    b.Navigation("Leerling")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
