// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleSchool.Data;

#nullable disable

namespace SimpleSchool.Migrations
{
    [DbContext(typeof(SimpleSchoolContext))]
    [Migration("20250522084949_AddIdentitySupport")]
    partial class AddIdentitySupport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.Property<int>("OpleidingenId")
                        .HasColumnType("int");

                    b.Property<int>("VakkenId")
                        .HasColumnType("int");

                    b.HasKey("OpleidingenId", "VakkenId");

                    b.HasIndex("VakkenId");

                    b.ToTable("Opleidingsvakken", (string)null);
                });

            modelBuilder.Entity("SimpleSchool.Models.Leerkracht", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Leerkracht");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Adres = "Anneplantsoen 764",
                            EMail = "dolorem",
                            GeboorteDatum = new DateTime(2025, 1, 3, 6, 37, 43, 148, DateTimeKind.Local).AddTicks(7632),
                            Naam = "Daan Groot"
                        },
                        new
                        {
                            Id = 12,
                            Adres = "Lisamarkt 97",
                            EMail = "omnis",
                            GeboorteDatum = new DateTime(2024, 11, 27, 19, 15, 14, 663, DateTimeKind.Local).AddTicks(461),
                            Naam = "Daan Hendriks"
                        },
                        new
                        {
                            Id = 13,
                            Adres = "Meerrijk 00",
                            EMail = "beatae",
                            GeboorteDatum = new DateTime(2025, 4, 23, 10, 32, 53, 328, DateTimeKind.Local).AddTicks(7609),
                            Naam = "Amber Berg"
                        },
                        new
                        {
                            Id = 14,
                            Adres = "Bergsteeg 862a",
                            EMail = "nemo",
                            GeboorteDatum = new DateTime(2024, 12, 2, 2, 55, 34, 618, DateTimeKind.Local).AddTicks(1649),
                            Naam = "Rick Koster"
                        },
                        new
                        {
                            Id = 15,
                            Adres = "Larsplantsoen 1",
                            EMail = "magnam",
                            GeboorteDatum = new DateTime(2024, 9, 24, 14, 7, 5, 539, DateTimeKind.Local).AddTicks(3833),
                            Naam = "Sophie Bruin"
                        },
                        new
                        {
                            Id = 16,
                            Adres = "Hendriksvelt 53",
                            EMail = "tempora",
                            GeboorteDatum = new DateTime(2024, 8, 13, 17, 57, 15, 964, DateTimeKind.Local).AddTicks(9547),
                            Naam = "Lotte Heuvel"
                        },
                        new
                        {
                            Id = 17,
                            Adres = "Rickdijk 593 II",
                            EMail = "vitae",
                            GeboorteDatum = new DateTime(2024, 6, 15, 2, 37, 30, 725, DateTimeKind.Local).AddTicks(8619),
                            Naam = "Anouk Meer"
                        },
                        new
                        {
                            Id = 18,
                            Adres = "Lucasvelt 050 II",
                            EMail = "similique",
                            GeboorteDatum = new DateTime(2024, 7, 4, 14, 23, 37, 149, DateTimeKind.Local).AddTicks(9721),
                            Naam = "Sanne Dekker"
                        },
                        new
                        {
                            Id = 19,
                            Adres = "Ricksloot 8",
                            EMail = "natus",
                            GeboorteDatum = new DateTime(2024, 9, 14, 15, 29, 2, 394, DateTimeKind.Local).AddTicks(757),
                            Naam = "Bas Koning"
                        },
                        new
                        {
                            Id = 20,
                            Adres = "Schoutenkade 650",
                            EMail = "dolorem",
                            GeboorteDatum = new DateTime(2024, 8, 31, 22, 19, 23, 699, DateTimeKind.Local).AddTicks(111),
                            Naam = "Ruben Leeuwen"
                        });
                });

            modelBuilder.Entity("SimpleSchool.Models.Leerling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpleidingId")
                        .HasColumnType("int");

                    b.Property<int>("StudentenkaartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpleidingId");

                    b.HasIndex("StudentenkaartId")
                        .IsUnique();

                    b.ToTable("Leerling");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Adres = "Grootplantsoen 716b",
                            EMail = "ut",
                            GeboorteDatum = new DateTime(2024, 7, 25, 0, 50, 19, 40, DateTimeKind.Local).AddTicks(5360),
                            Naam = "Anne Dam",
                            OpleidingId = 11,
                            StudentenkaartId = 11
                        },
                        new
                        {
                            Id = 12,
                            Adres = "Bergkade 754 II",
                            EMail = "enim",
                            GeboorteDatum = new DateTime(2024, 9, 30, 0, 13, 15, 609, DateTimeKind.Local).AddTicks(3169),
                            Naam = "Julia Vliet",
                            OpleidingId = 12,
                            StudentenkaartId = 12
                        },
                        new
                        {
                            Id = 13,
                            Adres = "Jessedijk 0",
                            EMail = "harum",
                            GeboorteDatum = new DateTime(2024, 9, 10, 15, 0, 58, 502, DateTimeKind.Local).AddTicks(7149),
                            Naam = "Thijs Bruin",
                            OpleidingId = 13,
                            StudentenkaartId = 13
                        },
                        new
                        {
                            Id = 14,
                            Adres = "Maxvelt 3",
                            EMail = "numquam",
                            GeboorteDatum = new DateTime(2025, 3, 25, 21, 31, 14, 915, DateTimeKind.Local).AddTicks(7772),
                            Naam = "Sophie Vries",
                            OpleidingId = 14,
                            StudentenkaartId = 14
                        },
                        new
                        {
                            Id = 15,
                            Adres = "Dijkstrarijk 642c",
                            EMail = "debitis",
                            GeboorteDatum = new DateTime(2024, 8, 31, 0, 52, 26, 740, DateTimeKind.Local).AddTicks(4404),
                            Naam = "Fleur Koning",
                            OpleidingId = 15,
                            StudentenkaartId = 15
                        },
                        new
                        {
                            Id = 16,
                            Adres = "Haangracht 354a",
                            EMail = "aut",
                            GeboorteDatum = new DateTime(2024, 12, 12, 20, 7, 29, 69, DateTimeKind.Local).AddTicks(283),
                            Naam = "Nick Jacobs",
                            OpleidingId = 16,
                            StudentenkaartId = 16
                        },
                        new
                        {
                            Id = 17,
                            Adres = "Veenweg 213 I",
                            EMail = "impedit",
                            GeboorteDatum = new DateTime(2025, 4, 10, 11, 25, 32, 355, DateTimeKind.Local).AddTicks(474),
                            Naam = "Anne Ruiter",
                            OpleidingId = 17,
                            StudentenkaartId = 17
                        },
                        new
                        {
                            Id = 18,
                            Adres = "Broeksteeg 527b",
                            EMail = "qui",
                            GeboorteDatum = new DateTime(2024, 9, 26, 12, 16, 11, 418, DateTimeKind.Local).AddTicks(5224),
                            Naam = "Lars Veen",
                            OpleidingId = 18,
                            StudentenkaartId = 18
                        },
                        new
                        {
                            Id = 19,
                            Adres = "Vriesmarkt 382 III",
                            EMail = "hic",
                            GeboorteDatum = new DateTime(2025, 3, 6, 21, 48, 25, 471, DateTimeKind.Local).AddTicks(4240),
                            Naam = "Ruben Vos",
                            OpleidingId = 19,
                            StudentenkaartId = 19
                        },
                        new
                        {
                            Id = 20,
                            Adres = "Lucaskade 063",
                            EMail = "itaque",
                            GeboorteDatum = new DateTime(2024, 10, 3, 13, 26, 6, 834, DateTimeKind.Local).AddTicks(1734),
                            Naam = "Johannes Leeuwen",
                            OpleidingId = 20,
                            StudentenkaartId = 20
                        });
                });

            modelBuilder.Entity("SimpleSchool.Models.Opleiding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeschikbarePlaatsen")
                        .HasColumnType("int");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duur")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Opleiding");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            BeschikbarePlaatsen = 386,
                            Beschrijving = "Quia sed reprehenderit officiis pariatur illo hic est numquam aliquam.",
                            Duur = 4,
                            Naam = "A omnis beatae."
                        },
                        new
                        {
                            Id = 12,
                            BeschikbarePlaatsen = 353,
                            Beschrijving = "Eum voluptas nostrum eos nam ratione rerum autem adipisci itaque.",
                            Duur = 3,
                            Naam = "Consequatur facere est."
                        },
                        new
                        {
                            Id = 13,
                            BeschikbarePlaatsen = 395,
                            Beschrijving = "Voluptatem culpa accusamus nobis velit non blanditiis est voluptates atque.",
                            Duur = 3,
                            Naam = "Quae harum est."
                        },
                        new
                        {
                            Id = 14,
                            BeschikbarePlaatsen = 207,
                            Beschrijving = "Ab eum aliquam rerum incidunt fugit voluptatem itaque amet dolor.",
                            Duur = 3,
                            Naam = "Ut est totam."
                        },
                        new
                        {
                            Id = 15,
                            BeschikbarePlaatsen = 361,
                            Beschrijving = "Quam quia iste et odit nihil aut ipsa harum fugiat.",
                            Duur = 4,
                            Naam = "Tempora maxime adipisci."
                        },
                        new
                        {
                            Id = 16,
                            BeschikbarePlaatsen = 339,
                            Beschrijving = "Blanditiis deleniti aut nesciunt necessitatibus eius vel necessitatibus dolorem vero.",
                            Duur = 4,
                            Naam = "Quis sequi eum."
                        },
                        new
                        {
                            Id = 17,
                            BeschikbarePlaatsen = 236,
                            Beschrijving = "Sit voluptatem facere odit veritatis quibusdam magni tempora nesciunt est.",
                            Duur = 4,
                            Naam = "Necessitatibus rerum nobis."
                        },
                        new
                        {
                            Id = 18,
                            BeschikbarePlaatsen = 372,
                            Beschrijving = "A aut quis quos quia placeat harum aperiam quae qui.",
                            Duur = 3,
                            Naam = "Ipsum repellendus dolorum."
                        },
                        new
                        {
                            Id = 19,
                            BeschikbarePlaatsen = 243,
                            Beschrijving = "Repellendus adipisci eos qui est aut ea ad officia eveniet.",
                            Duur = 3,
                            Naam = "Ipsa veniam minus."
                        },
                        new
                        {
                            Id = 20,
                            BeschikbarePlaatsen = 344,
                            Beschrijving = "Et possimus voluptas delectus ut aut ex adipisci culpa et.",
                            Duur = 4,
                            Naam = "Quia magnam tenetur."
                        });
                });

            modelBuilder.Entity("SimpleSchool.Models.StudentenKaart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Klas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentenKaart");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Klas = "blanditiis",
                            Naam = "Alexander Broek Sr.",
                            School = "Visser International"
                        },
                        new
                        {
                            Id = 12,
                            Klas = "velit",
                            Naam = "Prof. Vince Bakker",
                            School = "Vermeulen, Graaf and Groot"
                        },
                        new
                        {
                            Id = 13,
                            Klas = "quis",
                            Naam = "Bsc Luuk Hoek",
                            School = "Dam Groep"
                        },
                        new
                        {
                            Id = 14,
                            Klas = "ea",
                            Naam = "Moos Jong Sr.",
                            School = "Vries, Janssen and Schouten"
                        },
                        new
                        {
                            Id = 15,
                            Klas = "ducimus",
                            Naam = "Prof. Nikki Jansen",
                            School = "Meer HRM"
                        },
                        new
                        {
                            Id = 16,
                            Klas = "et",
                            Naam = "Prof. Wies Ruiter",
                            School = "Jong - Haan"
                        },
                        new
                        {
                            Id = 17,
                            Klas = "saepe",
                            Naam = "Msc Pien Jacobs",
                            School = "Janssen - Meer"
                        },
                        new
                        {
                            Id = 18,
                            Klas = "expedita",
                            Naam = "Joas Maas I",
                            School = "Vries ICT"
                        },
                        new
                        {
                            Id = 19,
                            Klas = "sint",
                            Naam = "Prof. Nienke Linden",
                            School = "Smit - Koning"
                        },
                        new
                        {
                            Id = 20,
                            Klas = "inventore",
                            Naam = "Prof. Maxim Koning",
                            School = "Graaf - Meijer"
                        });
                });

            modelBuilder.Entity("SimpleSchool.Models.Vak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AantalStudiePunten")
                        .HasColumnType("int");

                    b.Property<int>("LeerkrachtId")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Taal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Vaktype")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeerkrachtId");

                    b.ToTable("Vak");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            AantalStudiePunten = 31,
                            LeerkrachtId = 11,
                            Naam = "Ashley Ruiter Jr.",
                            Taal = "parsing",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 12,
                            AantalStudiePunten = 40,
                            LeerkrachtId = 12,
                            Naam = "Mevr. Dr. Olivia Meijer",
                            Taal = "Ridge",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 13,
                            AantalStudiePunten = 23,
                            LeerkrachtId = 13,
                            Naam = "Emma Klein II",
                            Taal = "grid-enabled",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 14,
                            AantalStudiePunten = 32,
                            LeerkrachtId = 14,
                            Naam = "Dhr. Evelien Dam",
                            Taal = "Unbranded",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 15,
                            AantalStudiePunten = 26,
                            LeerkrachtId = 15,
                            Naam = "Prof. Nikki Leeuwen",
                            Taal = "monitor",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 16,
                            AantalStudiePunten = 26,
                            LeerkrachtId = 16,
                            Naam = "Mevr. Dr. Lizz Janssen",
                            Taal = "Pass",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 17,
                            AantalStudiePunten = 40,
                            LeerkrachtId = 17,
                            Naam = "Mevr. Dr. Floor Smit",
                            Taal = "Money Market Account",
                            Vaktype = 0
                        },
                        new
                        {
                            Id = 18,
                            AantalStudiePunten = 22,
                            LeerkrachtId = 18,
                            Naam = "Dhr. Vive Willems",
                            Taal = "IB",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 19,
                            AantalStudiePunten = 41,
                            LeerkrachtId = 19,
                            Naam = "Msc Gideon Boer",
                            Taal = "visualize",
                            Vaktype = 1
                        },
                        new
                        {
                            Id = 20,
                            AantalStudiePunten = 26,
                            LeerkrachtId = 20,
                            Naam = "Hanne Brink IV",
                            Taal = "Intelligent",
                            Vaktype = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpleidingVak", b =>
                {
                    b.HasOne("SimpleSchool.Models.Opleiding", null)
                        .WithMany()
                        .HasForeignKey("OpleidingenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleSchool.Models.Vak", null)
                        .WithMany()
                        .HasForeignKey("VakkenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleSchool.Models.Leerling", b =>
                {
                    b.HasOne("SimpleSchool.Models.Opleiding", "Opleiding")
                        .WithMany("Leerlingen")
                        .HasForeignKey("OpleidingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleSchool.Models.StudentenKaart", "Studentenkaart")
                        .WithOne("Leerling")
                        .HasForeignKey("SimpleSchool.Models.Leerling", "StudentenkaartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opleiding");

                    b.Navigation("Studentenkaart");
                });

            modelBuilder.Entity("SimpleSchool.Models.Vak", b =>
                {
                    b.HasOne("SimpleSchool.Models.Leerkracht", "Leerkracht")
                        .WithMany("Vakken")
                        .HasForeignKey("LeerkrachtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leerkracht");
                });

            modelBuilder.Entity("SimpleSchool.Models.Leerkracht", b =>
                {
                    b.Navigation("Vakken");
                });

            modelBuilder.Entity("SimpleSchool.Models.Opleiding", b =>
                {
                    b.Navigation("Leerlingen");
                });

            modelBuilder.Entity("SimpleSchool.Models.StudentenKaart", b =>
                {
                    b.Navigation("Leerling")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
